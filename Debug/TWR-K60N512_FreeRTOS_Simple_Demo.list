
TWR-K60N512_FreeRTOS_Simple_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000410  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000224c  00000410  00000410  00010410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  0000265c  0000265c  0001265c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  00002660  00002660  00012660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000008  1fff0000  00002664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00001df4  1fff0008  0000266c  00020008  2**3
                  ALLOC
  6 ._user_heap_stack 00000400  1fff1dfc  0000266c  00021dfc  2**0
                  ALLOC
  7 .ARM.attributes 0000002c  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  8 .debug_info   00004ea2  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000fa5  00000000  00000000  00024ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000420  00000000  00000000  00025e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000390  00000000  00000000  0002629b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001d72  00000000  00000000  0002662b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001ae1  00000000  00000000  0002839d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      0000007c  00000000  00000000  00029e7e  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00000fb0  00000000  00000000  00029efc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .stabstr      0000003f  00000000  00000000  0002aeac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff0008 	.word	0x1fff0008
     42c:	00000000 	.word	0x00000000
     430:	00002644 	.word	0x00002644

00000434 <frame_dummy>:
     434:	b508      	push	{r3, lr}
     436:	4b03      	ldr	r3, [pc, #12]	; (444 <frame_dummy+0x10>)
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4903      	ldr	r1, [pc, #12]	; (448 <frame_dummy+0x14>)
     43c:	4803      	ldr	r0, [pc, #12]	; (44c <frame_dummy+0x18>)
     43e:	f3af 8000 	nop.w
     442:	bd08      	pop	{r3, pc}
     444:	00000000 	.word	0x00000000
     448:	1fff000c 	.word	0x1fff000c
     44c:	00002644 	.word	0x00002644

00000450 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     450:	b480      	push	{r7}
     452:	b083      	sub	sp, #12
     454:	af00      	add	r7, sp, #0
     456:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     458:	687b      	ldr	r3, [r7, #4]
     45a:	f103 0208 	add.w	r2, r3, #8
     45e:	687b      	ldr	r3, [r7, #4]
     460:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     462:	687b      	ldr	r3, [r7, #4]
     464:	f04f 32ff 	mov.w	r2, #4294967295
     468:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     46a:	687b      	ldr	r3, [r7, #4]
     46c:	f103 0208 	add.w	r2, r3, #8
     470:	687b      	ldr	r3, [r7, #4]
     472:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     474:	687b      	ldr	r3, [r7, #4]
     476:	f103 0208 	add.w	r2, r3, #8
     47a:	687b      	ldr	r3, [r7, #4]
     47c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     47e:	687b      	ldr	r3, [r7, #4]
     480:	2200      	movs	r2, #0
     482:	601a      	str	r2, [r3, #0]
}
     484:	bf00      	nop
     486:	370c      	adds	r7, #12
     488:	46bd      	mov	sp, r7
     48a:	bc80      	pop	{r7}
     48c:	4770      	bx	lr

0000048e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
     48e:	b480      	push	{r7}
     490:	b083      	sub	sp, #12
     492:	af00      	add	r7, sp, #0
     494:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     496:	687b      	ldr	r3, [r7, #4]
     498:	2200      	movs	r2, #0
     49a:	611a      	str	r2, [r3, #16]
}
     49c:	bf00      	nop
     49e:	370c      	adds	r7, #12
     4a0:	46bd      	mov	sp, r7
     4a2:	bc80      	pop	{r7}
     4a4:	4770      	bx	lr

000004a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     4a6:	b480      	push	{r7}
     4a8:	b085      	sub	sp, #20
     4aa:	af00      	add	r7, sp, #0
     4ac:	6078      	str	r0, [r7, #4]
     4ae:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     4b0:	687b      	ldr	r3, [r7, #4]
     4b2:	685b      	ldr	r3, [r3, #4]
     4b4:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
     4b6:	68fb      	ldr	r3, [r7, #12]
     4b8:	685a      	ldr	r2, [r3, #4]
     4ba:	683b      	ldr	r3, [r7, #0]
     4bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
     4be:	687b      	ldr	r3, [r7, #4]
     4c0:	685a      	ldr	r2, [r3, #4]
     4c2:	683b      	ldr	r3, [r7, #0]
     4c4:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     4c6:	68fb      	ldr	r3, [r7, #12]
     4c8:	685b      	ldr	r3, [r3, #4]
     4ca:	683a      	ldr	r2, [r7, #0]
     4cc:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     4ce:	68fb      	ldr	r3, [r7, #12]
     4d0:	683a      	ldr	r2, [r7, #0]
     4d2:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     4d4:	687b      	ldr	r3, [r7, #4]
     4d6:	683a      	ldr	r2, [r7, #0]
     4d8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     4da:	683b      	ldr	r3, [r7, #0]
     4dc:	687a      	ldr	r2, [r7, #4]
     4de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
     4e0:	687b      	ldr	r3, [r7, #4]
     4e2:	681b      	ldr	r3, [r3, #0]
     4e4:	1c5a      	adds	r2, r3, #1
     4e6:	687b      	ldr	r3, [r7, #4]
     4e8:	601a      	str	r2, [r3, #0]
}
     4ea:	bf00      	nop
     4ec:	3714      	adds	r7, #20
     4ee:	46bd      	mov	sp, r7
     4f0:	bc80      	pop	{r7}
     4f2:	4770      	bx	lr

000004f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     4f4:	b480      	push	{r7}
     4f6:	b085      	sub	sp, #20
     4f8:	af00      	add	r7, sp, #0
     4fa:	6078      	str	r0, [r7, #4]
     4fc:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     4fe:	683b      	ldr	r3, [r7, #0]
     500:	681b      	ldr	r3, [r3, #0]
     502:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     504:	68bb      	ldr	r3, [r7, #8]
     506:	f1b3 3fff 	cmp.w	r3, #4294967295
     50a:	d103      	bne.n	514 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     50c:	687b      	ldr	r3, [r7, #4]
     50e:	691b      	ldr	r3, [r3, #16]
     510:	60fb      	str	r3, [r7, #12]
     512:	e00c      	b.n	52e <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     514:	687b      	ldr	r3, [r7, #4]
     516:	3308      	adds	r3, #8
     518:	60fb      	str	r3, [r7, #12]
     51a:	e002      	b.n	522 <vListInsert+0x2e>
     51c:	68fb      	ldr	r3, [r7, #12]
     51e:	685b      	ldr	r3, [r3, #4]
     520:	60fb      	str	r3, [r7, #12]
     522:	68fb      	ldr	r3, [r7, #12]
     524:	685b      	ldr	r3, [r3, #4]
     526:	681a      	ldr	r2, [r3, #0]
     528:	68bb      	ldr	r3, [r7, #8]
     52a:	429a      	cmp	r2, r3
     52c:	d9f6      	bls.n	51c <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     52e:	68fb      	ldr	r3, [r7, #12]
     530:	685a      	ldr	r2, [r3, #4]
     532:	683b      	ldr	r3, [r7, #0]
     534:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     536:	683b      	ldr	r3, [r7, #0]
     538:	685b      	ldr	r3, [r3, #4]
     53a:	683a      	ldr	r2, [r7, #0]
     53c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
     53e:	683b      	ldr	r3, [r7, #0]
     540:	68fa      	ldr	r2, [r7, #12]
     542:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     544:	68fb      	ldr	r3, [r7, #12]
     546:	683a      	ldr	r2, [r7, #0]
     548:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     54a:	683b      	ldr	r3, [r7, #0]
     54c:	687a      	ldr	r2, [r7, #4]
     54e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
     550:	687b      	ldr	r3, [r7, #4]
     552:	681b      	ldr	r3, [r3, #0]
     554:	1c5a      	adds	r2, r3, #1
     556:	687b      	ldr	r3, [r7, #4]
     558:	601a      	str	r2, [r3, #0]
}
     55a:	bf00      	nop
     55c:	3714      	adds	r7, #20
     55e:	46bd      	mov	sp, r7
     560:	bc80      	pop	{r7}
     562:	4770      	bx	lr

00000564 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     564:	b480      	push	{r7}
     566:	b085      	sub	sp, #20
     568:	af00      	add	r7, sp, #0
     56a:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     56c:	687b      	ldr	r3, [r7, #4]
     56e:	685b      	ldr	r3, [r3, #4]
     570:	687a      	ldr	r2, [r7, #4]
     572:	6892      	ldr	r2, [r2, #8]
     574:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     576:	687b      	ldr	r3, [r7, #4]
     578:	689b      	ldr	r3, [r3, #8]
     57a:	687a      	ldr	r2, [r7, #4]
     57c:	6852      	ldr	r2, [r2, #4]
     57e:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     580:	687b      	ldr	r3, [r7, #4]
     582:	691b      	ldr	r3, [r3, #16]
     584:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     586:	68fb      	ldr	r3, [r7, #12]
     588:	685a      	ldr	r2, [r3, #4]
     58a:	687b      	ldr	r3, [r7, #4]
     58c:	429a      	cmp	r2, r3
     58e:	d103      	bne.n	598 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     590:	687b      	ldr	r3, [r7, #4]
     592:	689a      	ldr	r2, [r3, #8]
     594:	68fb      	ldr	r3, [r7, #12]
     596:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
     598:	687b      	ldr	r3, [r7, #4]
     59a:	2200      	movs	r2, #0
     59c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
     59e:	68fb      	ldr	r3, [r7, #12]
     5a0:	681b      	ldr	r3, [r3, #0]
     5a2:	1e5a      	subs	r2, r3, #1
     5a4:	68fb      	ldr	r3, [r7, #12]
     5a6:	601a      	str	r2, [r3, #0]
}
     5a8:	bf00      	nop
     5aa:	3714      	adds	r7, #20
     5ac:	46bd      	mov	sp, r7
     5ae:	bc80      	pop	{r7}
     5b0:	4770      	bx	lr

000005b2 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
     5b2:	b480      	push	{r7}
     5b4:	b085      	sub	sp, #20
     5b6:	af00      	add	r7, sp, #0
     5b8:	60f8      	str	r0, [r7, #12]
     5ba:	60b9      	str	r1, [r7, #8]
     5bc:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
     5be:	68fb      	ldr	r3, [r7, #12]
     5c0:	3b04      	subs	r3, #4
     5c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
     5c4:	68fb      	ldr	r3, [r7, #12]
     5c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     5ca:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
     5cc:	68fb      	ldr	r3, [r7, #12]
     5ce:	3b04      	subs	r3, #4
     5d0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
     5d2:	68ba      	ldr	r2, [r7, #8]
     5d4:	68fb      	ldr	r3, [r7, #12]
     5d6:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
     5d8:	68fb      	ldr	r3, [r7, #12]
     5da:	3b04      	subs	r3, #4
     5dc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
     5de:	68fb      	ldr	r3, [r7, #12]
     5e0:	2200      	movs	r2, #0
     5e2:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
     5e4:	68fb      	ldr	r3, [r7, #12]
     5e6:	3b14      	subs	r3, #20
     5e8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
     5ea:	687a      	ldr	r2, [r7, #4]
     5ec:	68fb      	ldr	r3, [r7, #12]
     5ee:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
     5f0:	68fb      	ldr	r3, [r7, #12]
     5f2:	3b20      	subs	r3, #32
     5f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
     5f6:	68fb      	ldr	r3, [r7, #12]
}
     5f8:	4618      	mov	r0, r3
     5fa:	3714      	adds	r7, #20
     5fc:	46bd      	mov	sp, r7
     5fe:	bc80      	pop	{r7}
     600:	4770      	bx	lr
	...

00000604 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
     604:	4b06      	ldr	r3, [pc, #24]	; (620 <pxCurrentTCBConst2>)
     606:	6819      	ldr	r1, [r3, #0]
     608:	6808      	ldr	r0, [r1, #0]
     60a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
     60e:	f380 8809 	msr	PSP, r0
     612:	f04f 0000 	mov.w	r0, #0
     616:	f380 8811 	msr	BASEPRI, r0
     61a:	f04e 0e0d 	orr.w	lr, lr, #13
     61e:	4770      	bx	lr

00000620 <pxCurrentTCBConst2>:
     620:	1fff1c2c 	.word	0x1fff1c2c
					"	bx r14							\n"
					"									\n"
					"	.align 2						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
     624:	bf00      	nop
     626:	bf00      	nop

00000628 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
     628:	4804      	ldr	r0, [pc, #16]	; (63c <prvPortStartFirstTask+0x14>)
     62a:	6800      	ldr	r0, [r0, #0]
     62c:	6800      	ldr	r0, [r0, #0]
     62e:	f380 8808 	msr	MSP, r0
     632:	b662      	cpsie	i
     634:	df00      	svc	0
     636:	bf00      	nop
					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
					" cpsie i				\n" /* Globally enable interrupts. */
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
     638:	bf00      	nop
     63a:	0000      	.short	0x0000
     63c:	e000ed08 	.word	0xe000ed08

00000640 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
     640:	b580      	push	{r7, lr}
     642:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
     644:	4a0a      	ldr	r2, [pc, #40]	; (670 <xPortStartScheduler+0x30>)
     646:	4b0a      	ldr	r3, [pc, #40]	; (670 <xPortStartScheduler+0x30>)
     648:	681b      	ldr	r3, [r3, #0]
     64a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     64e:	6013      	str	r3, [r2, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
     650:	4a07      	ldr	r2, [pc, #28]	; (670 <xPortStartScheduler+0x30>)
     652:	4b07      	ldr	r3, [pc, #28]	; (670 <xPortStartScheduler+0x30>)
     654:	681b      	ldr	r3, [r3, #0]
     656:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
     65a:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
     65c:	f000 f87a 	bl	754 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
     660:	4b04      	ldr	r3, [pc, #16]	; (674 <xPortStartScheduler+0x34>)
     662:	2200      	movs	r2, #0
     664:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
     666:	f7ff ffdf 	bl	628 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
     66a:	2300      	movs	r3, #0
}
     66c:	4618      	mov	r0, r3
     66e:	bd80      	pop	{r7, pc}
     670:	e000ed20 	.word	0xe000ed20
     674:	1fff0000 	.word	0x1fff0000

00000678 <vPortYieldFromISR>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
     678:	b480      	push	{r7}
     67a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
     67c:	4b03      	ldr	r3, [pc, #12]	; (68c <vPortYieldFromISR+0x14>)
     67e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     682:	601a      	str	r2, [r3, #0]
}
     684:	bf00      	nop
     686:	46bd      	mov	sp, r7
     688:	bc80      	pop	{r7}
     68a:	4770      	bx	lr
     68c:	e000ed04 	.word	0xe000ed04

00000690 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
     690:	b480      	push	{r7}
     692:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
     694:	f04f 0050 	mov.w	r0, #80	; 0x50
     698:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
     69c:	4b04      	ldr	r3, [pc, #16]	; (6b0 <vPortEnterCritical+0x20>)
     69e:	681b      	ldr	r3, [r3, #0]
     6a0:	3301      	adds	r3, #1
     6a2:	4a03      	ldr	r2, [pc, #12]	; (6b0 <vPortEnterCritical+0x20>)
     6a4:	6013      	str	r3, [r2, #0]
}
     6a6:	bf00      	nop
     6a8:	46bd      	mov	sp, r7
     6aa:	bc80      	pop	{r7}
     6ac:	4770      	bx	lr
     6ae:	bf00      	nop
     6b0:	1fff0000 	.word	0x1fff0000

000006b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
     6b4:	b480      	push	{r7}
     6b6:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
     6b8:	4b08      	ldr	r3, [pc, #32]	; (6dc <vPortExitCritical+0x28>)
     6ba:	681b      	ldr	r3, [r3, #0]
     6bc:	3b01      	subs	r3, #1
     6be:	4a07      	ldr	r2, [pc, #28]	; (6dc <vPortExitCritical+0x28>)
     6c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
     6c2:	4b06      	ldr	r3, [pc, #24]	; (6dc <vPortExitCritical+0x28>)
     6c4:	681b      	ldr	r3, [r3, #0]
     6c6:	2b00      	cmp	r3, #0
     6c8:	d103      	bne.n	6d2 <vPortExitCritical+0x1e>
	{
		portENABLE_INTERRUPTS();
     6ca:	f04f 0000 	mov.w	r0, #0
     6ce:	f380 8811 	msr	BASEPRI, r0
	}
}
     6d2:	bf00      	nop
     6d4:	46bd      	mov	sp, r7
     6d6:	bc80      	pop	{r7}
     6d8:	4770      	bx	lr
     6da:	bf00      	nop
     6dc:	1fff0000 	.word	0x1fff0000

000006e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
     6e0:	f3ef 8009 	mrs	r0, PSP
     6e4:	4b0c      	ldr	r3, [pc, #48]	; (718 <pxCurrentTCBConst>)
     6e6:	681a      	ldr	r2, [r3, #0]
     6e8:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
     6ec:	6010      	str	r0, [r2, #0]
     6ee:	e92d 4008 	stmdb	sp!, {r3, lr}
     6f2:	f04f 0050 	mov.w	r0, #80	; 0x50
     6f6:	f380 8811 	msr	BASEPRI, r0
     6fa:	f000 fee9 	bl	14d0 <vTaskSwitchContext>
     6fe:	f04f 0000 	mov.w	r0, #0
     702:	f380 8811 	msr	BASEPRI, r0
     706:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     70a:	6819      	ldr	r1, [r3, #0]
     70c:	6808      	ldr	r0, [r1, #0]
     70e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
     712:	f380 8809 	msr	PSP, r0
     716:	4770      	bx	lr

00000718 <pxCurrentTCBConst>:
     718:	1fff1c2c 	.word	0x1fff1c2c
	"										\n"
	"	.align 2							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
     71c:	bf00      	nop
     71e:	bf00      	nop

00000720 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
     720:	b580      	push	{r7, lr}
     722:	b082      	sub	sp, #8
     724:	af00      	add	r7, sp, #0
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
     726:	4b0a      	ldr	r3, [pc, #40]	; (750 <SysTick_Handler+0x30>)
     728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     72c:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
     72e:	2300      	movs	r3, #0
     730:	607b      	str	r3, [r7, #4]
     732:	f04f 0050 	mov.w	r0, #80	; 0x50
     736:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
     73a:	f000 fe21 	bl	1380 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
     73e:	f04f 0000 	mov.w	r0, #0
     742:	f380 8811 	msr	BASEPRI, r0
}
     746:	bf00      	nop
     748:	3708      	adds	r7, #8
     74a:	46bd      	mov	sp, r7
     74c:	bd80      	pop	{r7, pc}
     74e:	bf00      	nop
     750:	e000ed04 	.word	0xe000ed04

00000754 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
     754:	b480      	push	{r7}
     756:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
     758:	4b04      	ldr	r3, [pc, #16]	; (76c <prvSetupTimerInterrupt+0x18>)
     75a:	4a05      	ldr	r2, [pc, #20]	; (770 <prvSetupTimerInterrupt+0x1c>)
     75c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
     75e:	4b05      	ldr	r3, [pc, #20]	; (774 <prvSetupTimerInterrupt+0x20>)
     760:	2207      	movs	r2, #7
     762:	601a      	str	r2, [r3, #0]
}
     764:	bf00      	nop
     766:	46bd      	mov	sp, r7
     768:	bc80      	pop	{r7}
     76a:	4770      	bx	lr
     76c:	e000e014 	.word	0xe000e014
     770:	0001869f 	.word	0x0001869f
     774:	e000e010 	.word	0xe000e010

00000778 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     778:	b580      	push	{r7, lr}
     77a:	b084      	sub	sp, #16
     77c:	af00      	add	r7, sp, #0
     77e:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL; 
     780:	2300      	movs	r3, #0
     782:	60fb      	str	r3, [r7, #12]

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
     784:	687b      	ldr	r3, [r7, #4]
     786:	f003 0307 	and.w	r3, r3, #7
     78a:	2b00      	cmp	r3, #0
     78c:	d004      	beq.n	798 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
     78e:	687b      	ldr	r3, [r7, #4]
     790:	f023 0307 	bic.w	r3, r3, #7
     794:	3308      	adds	r3, #8
     796:	607b      	str	r3, [r7, #4]
		}
	#endif

	vTaskSuspendAll();
     798:	f000 fd4e 	bl	1238 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     79c:	4b12      	ldr	r3, [pc, #72]	; (7e8 <pvPortMalloc+0x70>)
     79e:	681a      	ldr	r2, [r3, #0]
     7a0:	687b      	ldr	r3, [r7, #4]
     7a2:	4413      	add	r3, r2
     7a4:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
     7a8:	d212      	bcs.n	7d0 <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
     7aa:	4b0f      	ldr	r3, [pc, #60]	; (7e8 <pvPortMalloc+0x70>)
     7ac:	681a      	ldr	r2, [r3, #0]
     7ae:	687b      	ldr	r3, [r7, #4]
     7b0:	441a      	add	r2, r3
     7b2:	4b0d      	ldr	r3, [pc, #52]	; (7e8 <pvPortMalloc+0x70>)
     7b4:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     7b6:	429a      	cmp	r2, r3
     7b8:	d90a      	bls.n	7d0 <pvPortMalloc+0x58>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     7ba:	4b0b      	ldr	r3, [pc, #44]	; (7e8 <pvPortMalloc+0x70>)
     7bc:	681b      	ldr	r3, [r3, #0]
     7be:	4a0b      	ldr	r2, [pc, #44]	; (7ec <pvPortMalloc+0x74>)
     7c0:	4413      	add	r3, r2
     7c2:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;			
     7c4:	4b08      	ldr	r3, [pc, #32]	; (7e8 <pvPortMalloc+0x70>)
     7c6:	681a      	ldr	r2, [r3, #0]
     7c8:	687b      	ldr	r3, [r7, #4]
     7ca:	4413      	add	r3, r2
     7cc:	4a06      	ldr	r2, [pc, #24]	; (7e8 <pvPortMalloc+0x70>)
     7ce:	6013      	str	r3, [r2, #0]
		}	
	}
	xTaskResumeAll();
     7d0:	f000 fd40 	bl	1254 <xTaskResumeAll>
	
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     7d4:	68fb      	ldr	r3, [r7, #12]
     7d6:	2b00      	cmp	r3, #0
     7d8:	d101      	bne.n	7de <pvPortMalloc+0x66>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     7da:	f001 fe47 	bl	246c <vApplicationMallocFailedHook>
		}
	}
	#endif	

	return pvReturn;
     7de:	68fb      	ldr	r3, [r7, #12]
}
     7e0:	4618      	mov	r0, r3
     7e2:	3710      	adds	r7, #16
     7e4:	46bd      	mov	sp, r7
     7e6:	bd80      	pop	{r7, pc}
     7e8:	1fff1c28 	.word	0x1fff1c28
     7ec:	1fff0028 	.word	0x1fff0028

000007f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     7f0:	b480      	push	{r7}
     7f2:	b083      	sub	sp, #12
     7f4:	af00      	add	r7, sp, #0
     7f6:	6078      	str	r0, [r7, #4]
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
     7f8:	bf00      	nop
     7fa:	370c      	adds	r7, #12
     7fc:	46bd      	mov	sp, r7
     7fe:	bc80      	pop	{r7}
     800:	4770      	bx	lr
	...

00000804 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
     804:	b480      	push	{r7}
     806:	af00      	add	r7, sp, #0
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
     808:	4b03      	ldr	r3, [pc, #12]	; (818 <xPortGetFreeHeapSize+0x14>)
     80a:	681b      	ldr	r3, [r3, #0]
     80c:	f5c3 53e0 	rsb	r3, r3, #7168	; 0x1c00
}
     810:	4618      	mov	r0, r3
     812:	46bd      	mov	sp, r7
     814:	bc80      	pop	{r7}
     816:	4770      	bx	lr
     818:	1fff1c28 	.word	0x1fff1c28

0000081c <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
     81c:	b580      	push	{r7, lr}
     81e:	b082      	sub	sp, #8
     820:	af00      	add	r7, sp, #0
     822:	6078      	str	r0, [r7, #4]
     824:	6039      	str	r1, [r7, #0]
	configASSERT( pxQueue );
     826:	687b      	ldr	r3, [r7, #4]
     828:	2b00      	cmp	r3, #0
     82a:	d104      	bne.n	836 <xQueueGenericReset+0x1a>
     82c:	f04f 0050 	mov.w	r0, #80	; 0x50
     830:	f380 8811 	msr	BASEPRI, r0
     834:	e7fe      	b.n	834 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
     836:	f7ff ff2b 	bl	690 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     83a:	687b      	ldr	r3, [r7, #4]
     83c:	681a      	ldr	r2, [r3, #0]
     83e:	687b      	ldr	r3, [r7, #4]
     840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     842:	6879      	ldr	r1, [r7, #4]
     844:	6c09      	ldr	r1, [r1, #64]	; 0x40
     846:	fb01 f303 	mul.w	r3, r1, r3
     84a:	441a      	add	r2, r3
     84c:	687b      	ldr	r3, [r7, #4]
     84e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
     850:	687b      	ldr	r3, [r7, #4]
     852:	2200      	movs	r2, #0
     854:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
     856:	687b      	ldr	r3, [r7, #4]
     858:	681a      	ldr	r2, [r3, #0]
     85a:	687b      	ldr	r3, [r7, #4]
     85c:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
     85e:	687b      	ldr	r3, [r7, #4]
     860:	681a      	ldr	r2, [r3, #0]
     862:	687b      	ldr	r3, [r7, #4]
     864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     866:	3b01      	subs	r3, #1
     868:	6879      	ldr	r1, [r7, #4]
     86a:	6c09      	ldr	r1, [r1, #64]	; 0x40
     86c:	fb01 f303 	mul.w	r3, r1, r3
     870:	441a      	add	r2, r3
     872:	687b      	ldr	r3, [r7, #4]
     874:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
     876:	687b      	ldr	r3, [r7, #4]
     878:	f04f 32ff 	mov.w	r2, #4294967295
     87c:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
     87e:	687b      	ldr	r3, [r7, #4]
     880:	f04f 32ff 	mov.w	r2, #4294967295
     884:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
     886:	683b      	ldr	r3, [r7, #0]
     888:	2b00      	cmp	r3, #0
     88a:	d10e      	bne.n	8aa <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then 
			the tasks will remain blocked as after this function exits the queue 
			will still be empty.  If there are tasks blocked waiting to	write to 
			the queue, then one should be unblocked as after this function exits 
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     88c:	687b      	ldr	r3, [r7, #4]
     88e:	691b      	ldr	r3, [r3, #16]
     890:	2b00      	cmp	r3, #0
     892:	d014      	beq.n	8be <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
     894:	687b      	ldr	r3, [r7, #4]
     896:	3310      	adds	r3, #16
     898:	4618      	mov	r0, r3
     89a:	f000 fef3 	bl	1684 <xTaskRemoveFromEventList>
     89e:	4603      	mov	r3, r0
     8a0:	2b01      	cmp	r3, #1
     8a2:	d10c      	bne.n	8be <xQueueGenericReset+0xa2>
				{
					portYIELD_WITHIN_API();
     8a4:	f7ff fee8 	bl	678 <vPortYieldFromISR>
     8a8:	e009      	b.n	8be <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
     8aa:	687b      	ldr	r3, [r7, #4]
     8ac:	3310      	adds	r3, #16
     8ae:	4618      	mov	r0, r3
     8b0:	f7ff fdce 	bl	450 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );		
     8b4:	687b      	ldr	r3, [r7, #4]
     8b6:	3324      	adds	r3, #36	; 0x24
     8b8:	4618      	mov	r0, r3
     8ba:	f7ff fdc9 	bl	450 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
     8be:	f7ff fef9 	bl	6b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
     8c2:	2301      	movs	r3, #1
}
     8c4:	4618      	mov	r0, r3
     8c6:	3708      	adds	r7, #8
     8c8:	46bd      	mov	sp, r7
     8ca:	bd80      	pop	{r7, pc}

000008cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
     8cc:	b580      	push	{r7, lr}
     8ce:	b088      	sub	sp, #32
     8d0:	af00      	add	r7, sp, #0
     8d2:	60f8      	str	r0, [r7, #12]
     8d4:	60b9      	str	r1, [r7, #8]
     8d6:	4613      	mov	r3, r2
     8d8:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
     8da:	2300      	movs	r3, #0
     8dc:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
     8de:	68fb      	ldr	r3, [r7, #12]
     8e0:	2b00      	cmp	r3, #0
     8e2:	d026      	beq.n	932 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
     8e4:	204c      	movs	r0, #76	; 0x4c
     8e6:	f7ff ff47 	bl	778 <pvPortMalloc>
     8ea:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
     8ec:	69bb      	ldr	r3, [r7, #24]
     8ee:	2b00      	cmp	r3, #0
     8f0:	d01f      	beq.n	932 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
     8f2:	68fb      	ldr	r3, [r7, #12]
     8f4:	68ba      	ldr	r2, [r7, #8]
     8f6:	fb02 f303 	mul.w	r3, r2, r3
     8fa:	3301      	adds	r3, #1
     8fc:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
     8fe:	6978      	ldr	r0, [r7, #20]
     900:	f7ff ff3a 	bl	778 <pvPortMalloc>
     904:	4602      	mov	r2, r0
     906:	69bb      	ldr	r3, [r7, #24]
     908:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
     90a:	69bb      	ldr	r3, [r7, #24]
     90c:	681b      	ldr	r3, [r3, #0]
     90e:	2b00      	cmp	r3, #0
     910:	d00c      	beq.n	92c <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
     912:	69bb      	ldr	r3, [r7, #24]
     914:	68fa      	ldr	r2, [r7, #12]
     916:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
     918:	69bb      	ldr	r3, [r7, #24]
     91a:	68ba      	ldr	r2, [r7, #8]
     91c:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
     91e:	2101      	movs	r1, #1
     920:	69b8      	ldr	r0, [r7, #24]
     922:	f7ff ff7b 	bl	81c <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
     926:	69bb      	ldr	r3, [r7, #24]
     928:	61fb      	str	r3, [r7, #28]
     92a:	e002      	b.n	932 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
     92c:	69b8      	ldr	r0, [r7, #24]
     92e:	f7ff ff5f 	bl	7f0 <vPortFree>
			}
		}
	}

	configASSERT( xReturn );
     932:	69fb      	ldr	r3, [r7, #28]
     934:	2b00      	cmp	r3, #0
     936:	d104      	bne.n	942 <xQueueGenericCreate+0x76>
     938:	f04f 0050 	mov.w	r0, #80	; 0x50
     93c:	f380 8811 	msr	BASEPRI, r0
     940:	e7fe      	b.n	940 <xQueueGenericCreate+0x74>

	return xReturn;
     942:	69fb      	ldr	r3, [r7, #28]
}
     944:	4618      	mov	r0, r3
     946:	3720      	adds	r7, #32
     948:	46bd      	mov	sp, r7
     94a:	bd80      	pop	{r7, pc}

0000094c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
     94c:	b580      	push	{r7, lr}
     94e:	b088      	sub	sp, #32
     950:	af00      	add	r7, sp, #0
     952:	60f8      	str	r0, [r7, #12]
     954:	60b9      	str	r1, [r7, #8]
     956:	607a      	str	r2, [r7, #4]
     958:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
     95a:	2300      	movs	r3, #0
     95c:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
     95e:	68fb      	ldr	r3, [r7, #12]
     960:	2b00      	cmp	r3, #0
     962:	d104      	bne.n	96e <xQueueGenericSend+0x22>
     964:	f04f 0050 	mov.w	r0, #80	; 0x50
     968:	f380 8811 	msr	BASEPRI, r0
     96c:	e7fe      	b.n	96c <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
     96e:	68bb      	ldr	r3, [r7, #8]
     970:	2b00      	cmp	r3, #0
     972:	d103      	bne.n	97c <xQueueGenericSend+0x30>
     974:	68fb      	ldr	r3, [r7, #12]
     976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     978:	2b00      	cmp	r3, #0
     97a:	d101      	bne.n	980 <xQueueGenericSend+0x34>
     97c:	2301      	movs	r3, #1
     97e:	e000      	b.n	982 <xQueueGenericSend+0x36>
     980:	2300      	movs	r3, #0
     982:	2b00      	cmp	r3, #0
     984:	d104      	bne.n	990 <xQueueGenericSend+0x44>
     986:	f04f 0050 	mov.w	r0, #80	; 0x50
     98a:	f380 8811 	msr	BASEPRI, r0
     98e:	e7fe      	b.n	98e <xQueueGenericSend+0x42>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
     990:	f7ff fe7e 	bl	690 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
     994:	68fb      	ldr	r3, [r7, #12]
     996:	6b9a      	ldr	r2, [r3, #56]	; 0x38
     998:	68fb      	ldr	r3, [r7, #12]
     99a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     99c:	429a      	cmp	r2, r3
     99e:	d216      	bcs.n	9ce <xQueueGenericSend+0x82>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     9a0:	683a      	ldr	r2, [r7, #0]
     9a2:	68b9      	ldr	r1, [r7, #8]
     9a4:	68f8      	ldr	r0, [r7, #12]
     9a6:	f000 f996 	bl	cd6 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     9aa:	68fb      	ldr	r3, [r7, #12]
     9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     9ae:	2b00      	cmp	r3, #0
     9b0:	d009      	beq.n	9c6 <xQueueGenericSend+0x7a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
     9b2:	68fb      	ldr	r3, [r7, #12]
     9b4:	3324      	adds	r3, #36	; 0x24
     9b6:	4618      	mov	r0, r3
     9b8:	f000 fe64 	bl	1684 <xTaskRemoveFromEventList>
     9bc:	4603      	mov	r3, r0
     9be:	2b01      	cmp	r3, #1
     9c0:	d101      	bne.n	9c6 <xQueueGenericSend+0x7a>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
     9c2:	f7ff fe59 	bl	678 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
     9c6:	f7ff fe75 	bl	6b4 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
     9ca:	2301      	movs	r3, #1
     9cc:	e056      	b.n	a7c <xQueueGenericSend+0x130>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
     9ce:	687b      	ldr	r3, [r7, #4]
     9d0:	2b00      	cmp	r3, #0
     9d2:	d103      	bne.n	9dc <xQueueGenericSend+0x90>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
     9d4:	f7ff fe6e 	bl	6b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
     9d8:	2300      	movs	r3, #0
     9da:	e04f      	b.n	a7c <xQueueGenericSend+0x130>
				}
				else if( xEntryTimeSet == pdFALSE )
     9dc:	69fb      	ldr	r3, [r7, #28]
     9de:	2b00      	cmp	r3, #0
     9e0:	d106      	bne.n	9f0 <xQueueGenericSend+0xa4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
     9e2:	f107 0314 	add.w	r3, r7, #20
     9e6:	4618      	mov	r0, r3
     9e8:	f000 fea4 	bl	1734 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
     9ec:	2301      	movs	r3, #1
     9ee:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
     9f0:	f7ff fe60 	bl	6b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
     9f4:	f000 fc20 	bl	1238 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
     9f8:	f7ff fe4a 	bl	690 <vPortEnterCritical>
     9fc:	68fb      	ldr	r3, [r7, #12]
     9fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     a00:	f1b3 3fff 	cmp.w	r3, #4294967295
     a04:	d102      	bne.n	a0c <xQueueGenericSend+0xc0>
     a06:	68fb      	ldr	r3, [r7, #12]
     a08:	2200      	movs	r2, #0
     a0a:	645a      	str	r2, [r3, #68]	; 0x44
     a0c:	68fb      	ldr	r3, [r7, #12]
     a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     a10:	f1b3 3fff 	cmp.w	r3, #4294967295
     a14:	d102      	bne.n	a1c <xQueueGenericSend+0xd0>
     a16:	68fb      	ldr	r3, [r7, #12]
     a18:	2200      	movs	r2, #0
     a1a:	649a      	str	r2, [r3, #72]	; 0x48
     a1c:	f7ff fe4a 	bl	6b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     a20:	1d3a      	adds	r2, r7, #4
     a22:	f107 0314 	add.w	r3, r7, #20
     a26:	4611      	mov	r1, r2
     a28:	4618      	mov	r0, r3
     a2a:	f000 fea1 	bl	1770 <xTaskCheckForTimeOut>
     a2e:	4603      	mov	r3, r0
     a30:	2b00      	cmp	r3, #0
     a32:	d11d      	bne.n	a70 <xQueueGenericSend+0x124>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
     a34:	68f8      	ldr	r0, [r7, #12]
     a36:	f000 fa30 	bl	e9a <prvIsQueueFull>
     a3a:	4603      	mov	r3, r0
     a3c:	2b00      	cmp	r3, #0
     a3e:	d011      	beq.n	a64 <xQueueGenericSend+0x118>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     a40:	68fb      	ldr	r3, [r7, #12]
     a42:	3310      	adds	r3, #16
     a44:	687a      	ldr	r2, [r7, #4]
     a46:	4611      	mov	r1, r2
     a48:	4618      	mov	r0, r3
     a4a:	f000 fdb9 	bl	15c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
     a4e:	68f8      	ldr	r0, [r7, #12]
     a50:	f000 f9c2 	bl	dd8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
     a54:	f000 fbfe 	bl	1254 <xTaskResumeAll>
     a58:	4603      	mov	r3, r0
     a5a:	2b00      	cmp	r3, #0
     a5c:	d198      	bne.n	990 <xQueueGenericSend+0x44>
				{
					portYIELD_WITHIN_API();
     a5e:	f7ff fe0b 	bl	678 <vPortYieldFromISR>
     a62:	e795      	b.n	990 <xQueueGenericSend+0x44>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
     a64:	68f8      	ldr	r0, [r7, #12]
     a66:	f000 f9b7 	bl	dd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
     a6a:	f000 fbf3 	bl	1254 <xTaskResumeAll>
     a6e:	e78f      	b.n	990 <xQueueGenericSend+0x44>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
     a70:	68f8      	ldr	r0, [r7, #12]
     a72:	f000 f9b1 	bl	dd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
     a76:	f000 fbed 	bl	1254 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
     a7a:	2300      	movs	r3, #0
		}
	}
}
     a7c:	4618      	mov	r0, r3
     a7e:	3720      	adds	r7, #32
     a80:	46bd      	mov	sp, r7
     a82:	bd80      	pop	{r7, pc}

00000a84 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
     a84:	b580      	push	{r7, lr}
     a86:	b086      	sub	sp, #24
     a88:	af00      	add	r7, sp, #0
     a8a:	60f8      	str	r0, [r7, #12]
     a8c:	60b9      	str	r1, [r7, #8]
     a8e:	607a      	str	r2, [r7, #4]
     a90:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
     a92:	68fb      	ldr	r3, [r7, #12]
     a94:	2b00      	cmp	r3, #0
     a96:	d104      	bne.n	aa2 <xQueueGenericSendFromISR+0x1e>
     a98:	f04f 0050 	mov.w	r0, #80	; 0x50
     a9c:	f380 8811 	msr	BASEPRI, r0
     aa0:	e7fe      	b.n	aa0 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
     aa2:	68bb      	ldr	r3, [r7, #8]
     aa4:	2b00      	cmp	r3, #0
     aa6:	d103      	bne.n	ab0 <xQueueGenericSendFromISR+0x2c>
     aa8:	68fb      	ldr	r3, [r7, #12]
     aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     aac:	2b00      	cmp	r3, #0
     aae:	d101      	bne.n	ab4 <xQueueGenericSendFromISR+0x30>
     ab0:	2301      	movs	r3, #1
     ab2:	e000      	b.n	ab6 <xQueueGenericSendFromISR+0x32>
     ab4:	2300      	movs	r3, #0
     ab6:	2b00      	cmp	r3, #0
     ab8:	d104      	bne.n	ac4 <xQueueGenericSendFromISR+0x40>
     aba:	f04f 0050 	mov.w	r0, #80	; 0x50
     abe:	f380 8811 	msr	BASEPRI, r0
     ac2:	e7fe      	b.n	ac2 <xQueueGenericSendFromISR+0x3e>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     ac4:	2300      	movs	r3, #0
     ac6:	613b      	str	r3, [r7, #16]
     ac8:	f04f 0050 	mov.w	r0, #80	; 0x50
     acc:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
     ad0:	68fb      	ldr	r3, [r7, #12]
     ad2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
     ad4:	68fb      	ldr	r3, [r7, #12]
     ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     ad8:	429a      	cmp	r2, r3
     ada:	d224      	bcs.n	b26 <xQueueGenericSendFromISR+0xa2>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     adc:	683a      	ldr	r2, [r7, #0]
     ade:	68b9      	ldr	r1, [r7, #8]
     ae0:	68f8      	ldr	r0, [r7, #12]
     ae2:	f000 f8f8 	bl	cd6 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
     ae6:	68fb      	ldr	r3, [r7, #12]
     ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     aea:	f1b3 3fff 	cmp.w	r3, #4294967295
     aee:	d112      	bne.n	b16 <xQueueGenericSendFromISR+0x92>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     af0:	68fb      	ldr	r3, [r7, #12]
     af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     af4:	2b00      	cmp	r3, #0
     af6:	d013      	beq.n	b20 <xQueueGenericSendFromISR+0x9c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     af8:	68fb      	ldr	r3, [r7, #12]
     afa:	3324      	adds	r3, #36	; 0x24
     afc:	4618      	mov	r0, r3
     afe:	f000 fdc1 	bl	1684 <xTaskRemoveFromEventList>
     b02:	4603      	mov	r3, r0
     b04:	2b00      	cmp	r3, #0
     b06:	d00b      	beq.n	b20 <xQueueGenericSendFromISR+0x9c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
     b08:	687b      	ldr	r3, [r7, #4]
     b0a:	2b00      	cmp	r3, #0
     b0c:	d008      	beq.n	b20 <xQueueGenericSendFromISR+0x9c>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
     b0e:	687b      	ldr	r3, [r7, #4]
     b10:	2201      	movs	r2, #1
     b12:	601a      	str	r2, [r3, #0]
     b14:	e004      	b.n	b20 <xQueueGenericSendFromISR+0x9c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
     b16:	68fb      	ldr	r3, [r7, #12]
     b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     b1a:	1c5a      	adds	r2, r3, #1
     b1c:	68fb      	ldr	r3, [r7, #12]
     b1e:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
     b20:	2301      	movs	r3, #1
     b22:	617b      	str	r3, [r7, #20]
     b24:	e001      	b.n	b2a <xQueueGenericSendFromISR+0xa6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
     b26:	2300      	movs	r3, #0
     b28:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
     b2a:	f04f 0000 	mov.w	r0, #0
     b2e:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
     b32:	697b      	ldr	r3, [r7, #20]
}
     b34:	4618      	mov	r0, r3
     b36:	3718      	adds	r7, #24
     b38:	46bd      	mov	sp, r7
     b3a:	bd80      	pop	{r7, pc}

00000b3c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
     b3c:	b580      	push	{r7, lr}
     b3e:	b088      	sub	sp, #32
     b40:	af00      	add	r7, sp, #0
     b42:	60f8      	str	r0, [r7, #12]
     b44:	60b9      	str	r1, [r7, #8]
     b46:	607a      	str	r2, [r7, #4]
     b48:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
     b4a:	2300      	movs	r3, #0
     b4c:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
     b4e:	68fb      	ldr	r3, [r7, #12]
     b50:	2b00      	cmp	r3, #0
     b52:	d104      	bne.n	b5e <xQueueGenericReceive+0x22>
     b54:	f04f 0050 	mov.w	r0, #80	; 0x50
     b58:	f380 8811 	msr	BASEPRI, r0
     b5c:	e7fe      	b.n	b5c <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
     b5e:	68bb      	ldr	r3, [r7, #8]
     b60:	2b00      	cmp	r3, #0
     b62:	d103      	bne.n	b6c <xQueueGenericReceive+0x30>
     b64:	68fb      	ldr	r3, [r7, #12]
     b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     b68:	2b00      	cmp	r3, #0
     b6a:	d101      	bne.n	b70 <xQueueGenericReceive+0x34>
     b6c:	2301      	movs	r3, #1
     b6e:	e000      	b.n	b72 <xQueueGenericReceive+0x36>
     b70:	2300      	movs	r3, #0
     b72:	2b00      	cmp	r3, #0
     b74:	d104      	bne.n	b80 <xQueueGenericReceive+0x44>
     b76:	f04f 0050 	mov.w	r0, #80	; 0x50
     b7a:	f380 8811 	msr	BASEPRI, r0
     b7e:	e7fe      	b.n	b7e <xQueueGenericReceive+0x42>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
     b80:	f7ff fd86 	bl	690 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
     b84:	68fb      	ldr	r3, [r7, #12]
     b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     b88:	2b00      	cmp	r3, #0
     b8a:	d03b      	beq.n	c04 <xQueueGenericReceive+0xc8>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
     b8c:	68fb      	ldr	r3, [r7, #12]
     b8e:	68db      	ldr	r3, [r3, #12]
     b90:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
     b92:	68b9      	ldr	r1, [r7, #8]
     b94:	68f8      	ldr	r0, [r7, #12]
     b96:	f000 f8f9 	bl	d8c <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
     b9a:	683b      	ldr	r3, [r7, #0]
     b9c:	2b00      	cmp	r3, #0
     b9e:	d11c      	bne.n	bda <xQueueGenericReceive+0x9e>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
     ba0:	68fb      	ldr	r3, [r7, #12]
     ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     ba4:	1e5a      	subs	r2, r3, #1
     ba6:	68fb      	ldr	r3, [r7, #12]
     ba8:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     baa:	68fb      	ldr	r3, [r7, #12]
     bac:	681b      	ldr	r3, [r3, #0]
     bae:	2b00      	cmp	r3, #0
     bb0:	d104      	bne.n	bbc <xQueueGenericReceive+0x80>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
     bb2:	f000 ff77 	bl	1aa4 <xTaskGetCurrentTaskHandle>
     bb6:	4602      	mov	r2, r0
     bb8:	68fb      	ldr	r3, [r7, #12]
     bba:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     bbc:	68fb      	ldr	r3, [r7, #12]
     bbe:	691b      	ldr	r3, [r3, #16]
     bc0:	2b00      	cmp	r3, #0
     bc2:	d01b      	beq.n	bfc <xQueueGenericReceive+0xc0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
     bc4:	68fb      	ldr	r3, [r7, #12]
     bc6:	3310      	adds	r3, #16
     bc8:	4618      	mov	r0, r3
     bca:	f000 fd5b 	bl	1684 <xTaskRemoveFromEventList>
     bce:	4603      	mov	r3, r0
     bd0:	2b01      	cmp	r3, #1
     bd2:	d113      	bne.n	bfc <xQueueGenericReceive+0xc0>
						{
							portYIELD_WITHIN_API();
     bd4:	f7ff fd50 	bl	678 <vPortYieldFromISR>
     bd8:	e010      	b.n	bfc <xQueueGenericReceive+0xc0>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
     bda:	68fb      	ldr	r3, [r7, #12]
     bdc:	69ba      	ldr	r2, [r7, #24]
     bde:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     be0:	68fb      	ldr	r3, [r7, #12]
     be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     be4:	2b00      	cmp	r3, #0
     be6:	d009      	beq.n	bfc <xQueueGenericReceive+0xc0>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     be8:	68fb      	ldr	r3, [r7, #12]
     bea:	3324      	adds	r3, #36	; 0x24
     bec:	4618      	mov	r0, r3
     bee:	f000 fd49 	bl	1684 <xTaskRemoveFromEventList>
     bf2:	4603      	mov	r3, r0
     bf4:	2b00      	cmp	r3, #0
     bf6:	d001      	beq.n	bfc <xQueueGenericReceive+0xc0>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
     bf8:	f7ff fd3e 	bl	678 <vPortYieldFromISR>
						}
					}
				}

				taskEXIT_CRITICAL();
     bfc:	f7ff fd5a 	bl	6b4 <vPortExitCritical>
				return pdPASS;
     c00:	2301      	movs	r3, #1
     c02:	e064      	b.n	cce <xQueueGenericReceive+0x192>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
     c04:	687b      	ldr	r3, [r7, #4]
     c06:	2b00      	cmp	r3, #0
     c08:	d103      	bne.n	c12 <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
     c0a:	f7ff fd53 	bl	6b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
     c0e:	2300      	movs	r3, #0
     c10:	e05d      	b.n	cce <xQueueGenericReceive+0x192>
				}
				else if( xEntryTimeSet == pdFALSE )
     c12:	69fb      	ldr	r3, [r7, #28]
     c14:	2b00      	cmp	r3, #0
     c16:	d106      	bne.n	c26 <xQueueGenericReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
     c18:	f107 0310 	add.w	r3, r7, #16
     c1c:	4618      	mov	r0, r3
     c1e:	f000 fd89 	bl	1734 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
     c22:	2301      	movs	r3, #1
     c24:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
     c26:	f7ff fd45 	bl	6b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
     c2a:	f000 fb05 	bl	1238 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
     c2e:	f7ff fd2f 	bl	690 <vPortEnterCritical>
     c32:	68fb      	ldr	r3, [r7, #12]
     c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     c36:	f1b3 3fff 	cmp.w	r3, #4294967295
     c3a:	d102      	bne.n	c42 <xQueueGenericReceive+0x106>
     c3c:	68fb      	ldr	r3, [r7, #12]
     c3e:	2200      	movs	r2, #0
     c40:	645a      	str	r2, [r3, #68]	; 0x44
     c42:	68fb      	ldr	r3, [r7, #12]
     c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     c46:	f1b3 3fff 	cmp.w	r3, #4294967295
     c4a:	d102      	bne.n	c52 <xQueueGenericReceive+0x116>
     c4c:	68fb      	ldr	r3, [r7, #12]
     c4e:	2200      	movs	r2, #0
     c50:	649a      	str	r2, [r3, #72]	; 0x48
     c52:	f7ff fd2f 	bl	6b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     c56:	1d3a      	adds	r2, r7, #4
     c58:	f107 0310 	add.w	r3, r7, #16
     c5c:	4611      	mov	r1, r2
     c5e:	4618      	mov	r0, r3
     c60:	f000 fd86 	bl	1770 <xTaskCheckForTimeOut>
     c64:	4603      	mov	r3, r0
     c66:	2b00      	cmp	r3, #0
     c68:	d12b      	bne.n	cc2 <xQueueGenericReceive+0x186>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     c6a:	68f8      	ldr	r0, [r7, #12]
     c6c:	f000 f900 	bl	e70 <prvIsQueueEmpty>
     c70:	4603      	mov	r3, r0
     c72:	2b00      	cmp	r3, #0
     c74:	d01f      	beq.n	cb6 <xQueueGenericReceive+0x17a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     c76:	68fb      	ldr	r3, [r7, #12]
     c78:	681b      	ldr	r3, [r3, #0]
     c7a:	2b00      	cmp	r3, #0
     c7c:	d108      	bne.n	c90 <xQueueGenericReceive+0x154>
					{
						portENTER_CRITICAL();
     c7e:	f7ff fd07 	bl	690 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
     c82:	68fb      	ldr	r3, [r7, #12]
     c84:	685b      	ldr	r3, [r3, #4]
     c86:	4618      	mov	r0, r3
     c88:	f000 ff38 	bl	1afc <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
     c8c:	f7ff fd12 	bl	6b4 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     c90:	68fb      	ldr	r3, [r7, #12]
     c92:	3324      	adds	r3, #36	; 0x24
     c94:	687a      	ldr	r2, [r7, #4]
     c96:	4611      	mov	r1, r2
     c98:	4618      	mov	r0, r3
     c9a:	f000 fc91 	bl	15c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
     c9e:	68f8      	ldr	r0, [r7, #12]
     ca0:	f000 f89a 	bl	dd8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
     ca4:	f000 fad6 	bl	1254 <xTaskResumeAll>
     ca8:	4603      	mov	r3, r0
     caa:	2b00      	cmp	r3, #0
     cac:	f47f af68 	bne.w	b80 <xQueueGenericReceive+0x44>
				{
					portYIELD_WITHIN_API();
     cb0:	f7ff fce2 	bl	678 <vPortYieldFromISR>
     cb4:	e764      	b.n	b80 <xQueueGenericReceive+0x44>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
     cb6:	68f8      	ldr	r0, [r7, #12]
     cb8:	f000 f88e 	bl	dd8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
     cbc:	f000 faca 	bl	1254 <xTaskResumeAll>
     cc0:	e75e      	b.n	b80 <xQueueGenericReceive+0x44>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
     cc2:	68f8      	ldr	r0, [r7, #12]
     cc4:	f000 f888 	bl	dd8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
     cc8:	f000 fac4 	bl	1254 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
     ccc:	2300      	movs	r3, #0
		}
	}
}
     cce:	4618      	mov	r0, r3
     cd0:	3720      	adds	r7, #32
     cd2:	46bd      	mov	sp, r7
     cd4:	bd80      	pop	{r7, pc}

00000cd6 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
     cd6:	b580      	push	{r7, lr}
     cd8:	b084      	sub	sp, #16
     cda:	af00      	add	r7, sp, #0
     cdc:	60f8      	str	r0, [r7, #12]
     cde:	60b9      	str	r1, [r7, #8]
     ce0:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
     ce2:	68fb      	ldr	r3, [r7, #12]
     ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     ce6:	2b00      	cmp	r3, #0
     ce8:	d10c      	bne.n	d04 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     cea:	68fb      	ldr	r3, [r7, #12]
     cec:	681b      	ldr	r3, [r3, #0]
     cee:	2b00      	cmp	r3, #0
     cf0:	d143      	bne.n	d7a <prvCopyDataToQueue+0xa4>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
     cf2:	68fb      	ldr	r3, [r7, #12]
     cf4:	685b      	ldr	r3, [r3, #4]
     cf6:	4618      	mov	r0, r3
     cf8:	f000 ff5a 	bl	1bb0 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
     cfc:	68fb      	ldr	r3, [r7, #12]
     cfe:	2200      	movs	r2, #0
     d00:	605a      	str	r2, [r3, #4]
     d02:	e03a      	b.n	d7a <prvCopyDataToQueue+0xa4>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
     d04:	687b      	ldr	r3, [r7, #4]
     d06:	2b00      	cmp	r3, #0
     d08:	d119      	bne.n	d3e <prvCopyDataToQueue+0x68>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
     d0a:	68fb      	ldr	r3, [r7, #12]
     d0c:	6898      	ldr	r0, [r3, #8]
     d0e:	68fb      	ldr	r3, [r7, #12]
     d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     d12:	461a      	mov	r2, r3
     d14:	68b9      	ldr	r1, [r7, #8]
     d16:	f001 fc40 	bl	259a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     d1a:	68fb      	ldr	r3, [r7, #12]
     d1c:	689a      	ldr	r2, [r3, #8]
     d1e:	68fb      	ldr	r3, [r7, #12]
     d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     d22:	441a      	add	r2, r3
     d24:	68fb      	ldr	r3, [r7, #12]
     d26:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
     d28:	68fb      	ldr	r3, [r7, #12]
     d2a:	689a      	ldr	r2, [r3, #8]
     d2c:	68fb      	ldr	r3, [r7, #12]
     d2e:	685b      	ldr	r3, [r3, #4]
     d30:	429a      	cmp	r2, r3
     d32:	d322      	bcc.n	d7a <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
     d34:	68fb      	ldr	r3, [r7, #12]
     d36:	681a      	ldr	r2, [r3, #0]
     d38:	68fb      	ldr	r3, [r7, #12]
     d3a:	609a      	str	r2, [r3, #8]
     d3c:	e01d      	b.n	d7a <prvCopyDataToQueue+0xa4>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
     d3e:	68fb      	ldr	r3, [r7, #12]
     d40:	68d8      	ldr	r0, [r3, #12]
     d42:	68fb      	ldr	r3, [r7, #12]
     d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     d46:	461a      	mov	r2, r3
     d48:	68b9      	ldr	r1, [r7, #8]
     d4a:	f001 fc26 	bl	259a <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
     d4e:	68fb      	ldr	r3, [r7, #12]
     d50:	68da      	ldr	r2, [r3, #12]
     d52:	68fb      	ldr	r3, [r7, #12]
     d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     d56:	425b      	negs	r3, r3
     d58:	441a      	add	r2, r3
     d5a:	68fb      	ldr	r3, [r7, #12]
     d5c:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
     d5e:	68fb      	ldr	r3, [r7, #12]
     d60:	68da      	ldr	r2, [r3, #12]
     d62:	68fb      	ldr	r3, [r7, #12]
     d64:	681b      	ldr	r3, [r3, #0]
     d66:	429a      	cmp	r2, r3
     d68:	d207      	bcs.n	d7a <prvCopyDataToQueue+0xa4>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
     d6a:	68fb      	ldr	r3, [r7, #12]
     d6c:	685a      	ldr	r2, [r3, #4]
     d6e:	68fb      	ldr	r3, [r7, #12]
     d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     d72:	425b      	negs	r3, r3
     d74:	441a      	add	r2, r3
     d76:	68fb      	ldr	r3, [r7, #12]
     d78:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
     d7a:	68fb      	ldr	r3, [r7, #12]
     d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     d7e:	1c5a      	adds	r2, r3, #1
     d80:	68fb      	ldr	r3, [r7, #12]
     d82:	639a      	str	r2, [r3, #56]	; 0x38
}
     d84:	bf00      	nop
     d86:	3710      	adds	r7, #16
     d88:	46bd      	mov	sp, r7
     d8a:	bd80      	pop	{r7, pc}

00000d8c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
     d8c:	b580      	push	{r7, lr}
     d8e:	b082      	sub	sp, #8
     d90:	af00      	add	r7, sp, #0
     d92:	6078      	str	r0, [r7, #4]
     d94:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
     d96:	687b      	ldr	r3, [r7, #4]
     d98:	681b      	ldr	r3, [r3, #0]
     d9a:	2b00      	cmp	r3, #0
     d9c:	d018      	beq.n	dd0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
     d9e:	687b      	ldr	r3, [r7, #4]
     da0:	68da      	ldr	r2, [r3, #12]
     da2:	687b      	ldr	r3, [r7, #4]
     da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     da6:	441a      	add	r2, r3
     da8:	687b      	ldr	r3, [r7, #4]
     daa:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
     dac:	687b      	ldr	r3, [r7, #4]
     dae:	68da      	ldr	r2, [r3, #12]
     db0:	687b      	ldr	r3, [r7, #4]
     db2:	685b      	ldr	r3, [r3, #4]
     db4:	429a      	cmp	r2, r3
     db6:	d303      	bcc.n	dc0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
     db8:	687b      	ldr	r3, [r7, #4]
     dba:	681a      	ldr	r2, [r3, #0]
     dbc:	687b      	ldr	r3, [r7, #4]
     dbe:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
     dc0:	687b      	ldr	r3, [r7, #4]
     dc2:	68d9      	ldr	r1, [r3, #12]
     dc4:	687b      	ldr	r3, [r7, #4]
     dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     dc8:	461a      	mov	r2, r3
     dca:	6838      	ldr	r0, [r7, #0]
     dcc:	f001 fbe5 	bl	259a <memcpy>
	}
}
     dd0:	bf00      	nop
     dd2:	3708      	adds	r7, #8
     dd4:	46bd      	mov	sp, r7
     dd6:	bd80      	pop	{r7, pc}

00000dd8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
     dd8:	b580      	push	{r7, lr}
     dda:	b082      	sub	sp, #8
     ddc:	af00      	add	r7, sp, #0
     dde:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
     de0:	f7ff fc56 	bl	690 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
     de4:	e012      	b.n	e0c <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     de6:	687b      	ldr	r3, [r7, #4]
     de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     dea:	2b00      	cmp	r3, #0
     dec:	d013      	beq.n	e16 <prvUnlockQueue+0x3e>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     dee:	687b      	ldr	r3, [r7, #4]
     df0:	3324      	adds	r3, #36	; 0x24
     df2:	4618      	mov	r0, r3
     df4:	f000 fc46 	bl	1684 <xTaskRemoveFromEventList>
     df8:	4603      	mov	r3, r0
     dfa:	2b00      	cmp	r3, #0
     dfc:	d001      	beq.n	e02 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
     dfe:	f000 fd0b 	bl	1818 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
     e02:	687b      	ldr	r3, [r7, #4]
     e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     e06:	1e5a      	subs	r2, r3, #1
     e08:	687b      	ldr	r3, [r7, #4]
     e0a:	649a      	str	r2, [r3, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
     e0c:	687b      	ldr	r3, [r7, #4]
     e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     e10:	2b00      	cmp	r3, #0
     e12:	dce8      	bgt.n	de6 <prvUnlockQueue+0xe>
     e14:	e000      	b.n	e18 <prvUnlockQueue+0x40>
			}
			else
			{
				break;
     e16:	bf00      	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
     e18:	687b      	ldr	r3, [r7, #4]
     e1a:	f04f 32ff 	mov.w	r2, #4294967295
     e1e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
     e20:	f7ff fc48 	bl	6b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
     e24:	f7ff fc34 	bl	690 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
     e28:	e012      	b.n	e50 <prvUnlockQueue+0x78>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     e2a:	687b      	ldr	r3, [r7, #4]
     e2c:	691b      	ldr	r3, [r3, #16]
     e2e:	2b00      	cmp	r3, #0
     e30:	d013      	beq.n	e5a <prvUnlockQueue+0x82>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     e32:	687b      	ldr	r3, [r7, #4]
     e34:	3310      	adds	r3, #16
     e36:	4618      	mov	r0, r3
     e38:	f000 fc24 	bl	1684 <xTaskRemoveFromEventList>
     e3c:	4603      	mov	r3, r0
     e3e:	2b00      	cmp	r3, #0
     e40:	d001      	beq.n	e46 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
     e42:	f000 fce9 	bl	1818 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
     e46:	687b      	ldr	r3, [r7, #4]
     e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     e4a:	1e5a      	subs	r2, r3, #1
     e4c:	687b      	ldr	r3, [r7, #4]
     e4e:	645a      	str	r2, [r3, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
     e50:	687b      	ldr	r3, [r7, #4]
     e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     e54:	2b00      	cmp	r3, #0
     e56:	dce8      	bgt.n	e2a <prvUnlockQueue+0x52>
     e58:	e000      	b.n	e5c <prvUnlockQueue+0x84>
			}
			else
			{
				break;
     e5a:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
     e5c:	687b      	ldr	r3, [r7, #4]
     e5e:	f04f 32ff 	mov.w	r2, #4294967295
     e62:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
     e64:	f7ff fc26 	bl	6b4 <vPortExitCritical>
}
     e68:	bf00      	nop
     e6a:	3708      	adds	r7, #8
     e6c:	46bd      	mov	sp, r7
     e6e:	bd80      	pop	{r7, pc}

00000e70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
     e70:	b580      	push	{r7, lr}
     e72:	b084      	sub	sp, #16
     e74:	af00      	add	r7, sp, #0
     e76:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
     e78:	f7ff fc0a 	bl	690 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
     e7c:	687b      	ldr	r3, [r7, #4]
     e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     e80:	2b00      	cmp	r3, #0
     e82:	bf0c      	ite	eq
     e84:	2301      	moveq	r3, #1
     e86:	2300      	movne	r3, #0
     e88:	b2db      	uxtb	r3, r3
     e8a:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
     e8c:	f7ff fc12 	bl	6b4 <vPortExitCritical>

	return xReturn;
     e90:	68fb      	ldr	r3, [r7, #12]
}
     e92:	4618      	mov	r0, r3
     e94:	3710      	adds	r7, #16
     e96:	46bd      	mov	sp, r7
     e98:	bd80      	pop	{r7, pc}

00000e9a <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
     e9a:	b580      	push	{r7, lr}
     e9c:	b084      	sub	sp, #16
     e9e:	af00      	add	r7, sp, #0
     ea0:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
     ea2:	f7ff fbf5 	bl	690 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
     ea6:	687b      	ldr	r3, [r7, #4]
     ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
     eaa:	687b      	ldr	r3, [r7, #4]
     eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     eae:	429a      	cmp	r2, r3
     eb0:	bf0c      	ite	eq
     eb2:	2301      	moveq	r3, #1
     eb4:	2300      	movne	r3, #0
     eb6:	b2db      	uxtb	r3, r3
     eb8:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
     eba:	f7ff fbfb 	bl	6b4 <vPortExitCritical>

	return xReturn;
     ebe:	68fb      	ldr	r3, [r7, #12]
}
     ec0:	4618      	mov	r0, r3
     ec2:	3710      	adds	r7, #16
     ec4:	46bd      	mov	sp, r7
     ec6:	bd80      	pop	{r7, pc}

00000ec8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if configQUEUE_REGISTRY_SIZE > 0

	void vQueueAddToRegistry( xQueueHandle xQueue, signed char *pcQueueName )
	{
     ec8:	b480      	push	{r7}
     eca:	b085      	sub	sp, #20
     ecc:	af00      	add	r7, sp, #0
     ece:	6078      	str	r0, [r7, #4]
     ed0:	6039      	str	r1, [r7, #0]
	unsigned portBASE_TYPE ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( unsigned portBASE_TYPE ) 0U; ux < ( unsigned portBASE_TYPE ) configQUEUE_REGISTRY_SIZE; ux++ )
     ed2:	2300      	movs	r3, #0
     ed4:	60fb      	str	r3, [r7, #12]
     ed6:	e014      	b.n	f02 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
     ed8:	4a0e      	ldr	r2, [pc, #56]	; (f14 <vQueueAddToRegistry+0x4c>)
     eda:	68fb      	ldr	r3, [r7, #12]
     edc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     ee0:	2b00      	cmp	r3, #0
     ee2:	d10b      	bne.n	efc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
     ee4:	490b      	ldr	r1, [pc, #44]	; (f14 <vQueueAddToRegistry+0x4c>)
     ee6:	68fb      	ldr	r3, [r7, #12]
     ee8:	683a      	ldr	r2, [r7, #0]
     eea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
     eee:	4a09      	ldr	r2, [pc, #36]	; (f14 <vQueueAddToRegistry+0x4c>)
     ef0:	68fb      	ldr	r3, [r7, #12]
     ef2:	00db      	lsls	r3, r3, #3
     ef4:	4413      	add	r3, r2
     ef6:	687a      	ldr	r2, [r7, #4]
     ef8:	605a      	str	r2, [r3, #4]
				break;
     efa:	e005      	b.n	f08 <vQueueAddToRegistry+0x40>
		for( ux = ( unsigned portBASE_TYPE ) 0U; ux < ( unsigned portBASE_TYPE ) configQUEUE_REGISTRY_SIZE; ux++ )
     efc:	68fb      	ldr	r3, [r7, #12]
     efe:	3301      	adds	r3, #1
     f00:	60fb      	str	r3, [r7, #12]
     f02:	68fb      	ldr	r3, [r7, #12]
     f04:	2b0f      	cmp	r3, #15
     f06:	d9e7      	bls.n	ed8 <vQueueAddToRegistry+0x10>
			}
		}
	}
     f08:	bf00      	nop
     f0a:	3714      	adds	r7, #20
     f0c:	46bd      	mov	sp, r7
     f0e:	bc80      	pop	{r7}
     f10:	4770      	bx	lr
     f12:	bf00      	nop
     f14:	1fff1d7c 	.word	0x1fff1d7c

00000f18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
     f18:	b580      	push	{r7, lr}
     f1a:	b082      	sub	sp, #8
     f1c:	af00      	add	r7, sp, #0
     f1e:	6078      	str	r0, [r7, #4]
     f20:	6039      	str	r1, [r7, #0]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
     f22:	f7ff fbb5 	bl	690 <vPortEnterCritical>
     f26:	687b      	ldr	r3, [r7, #4]
     f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
     f2e:	d102      	bne.n	f36 <vQueueWaitForMessageRestricted+0x1e>
     f30:	687b      	ldr	r3, [r7, #4]
     f32:	2200      	movs	r2, #0
     f34:	645a      	str	r2, [r3, #68]	; 0x44
     f36:	687b      	ldr	r3, [r7, #4]
     f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
     f3e:	d102      	bne.n	f46 <vQueueWaitForMessageRestricted+0x2e>
     f40:	687b      	ldr	r3, [r7, #4]
     f42:	2200      	movs	r2, #0
     f44:	649a      	str	r2, [r3, #72]	; 0x48
     f46:	f7ff fbb5 	bl	6b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
     f4a:	687b      	ldr	r3, [r7, #4]
     f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     f4e:	2b00      	cmp	r3, #0
     f50:	d105      	bne.n	f5e <vQueueWaitForMessageRestricted+0x46>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     f52:	687b      	ldr	r3, [r7, #4]
     f54:	3324      	adds	r3, #36	; 0x24
     f56:	6839      	ldr	r1, [r7, #0]
     f58:	4618      	mov	r0, r3
     f5a:	f000 fb69 	bl	1630 <vTaskPlaceOnEventListRestricted>
		}
		prvUnlockQueue( pxQueue );
     f5e:	6878      	ldr	r0, [r7, #4]
     f60:	f7ff ff3a 	bl	dd8 <prvUnlockQueue>
	}
     f64:	bf00      	nop
     f66:	3708      	adds	r7, #8
     f68:	46bd      	mov	sp, r7
     f6a:	bd80      	pop	{r7, pc}

00000f6c <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
     f6c:	b580      	push	{r7, lr}
     f6e:	b08a      	sub	sp, #40	; 0x28
     f70:	af02      	add	r7, sp, #8
     f72:	60f8      	str	r0, [r7, #12]
     f74:	60b9      	str	r1, [r7, #8]
     f76:	603b      	str	r3, [r7, #0]
     f78:	4613      	mov	r3, r2
     f7a:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
     f7c:	68fb      	ldr	r3, [r7, #12]
     f7e:	2b00      	cmp	r3, #0
     f80:	d104      	bne.n	f8c <xTaskGenericCreate+0x20>
     f82:	f04f 0050 	mov.w	r0, #80	; 0x50
     f86:	f380 8811 	msr	BASEPRI, r0
     f8a:	e7fe      	b.n	f8a <xTaskGenericCreate+0x1e>
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );
     f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
     f8e:	2b04      	cmp	r3, #4
     f90:	d904      	bls.n	f9c <xTaskGenericCreate+0x30>
     f92:	f04f 0050 	mov.w	r0, #80	; 0x50
     f96:	f380 8811 	msr	BASEPRI, r0
     f9a:	e7fe      	b.n	f9a <xTaskGenericCreate+0x2e>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
     f9c:	88fb      	ldrh	r3, [r7, #6]
     f9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
     fa0:	4618      	mov	r0, r3
     fa2:	f000 fd3d 	bl	1a20 <prvAllocateTCBAndStack>
     fa6:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
     fa8:	69bb      	ldr	r3, [r7, #24]
     faa:	2b00      	cmp	r3, #0
     fac:	f000 8086 	beq.w	10bc <xTaskGenericCreate+0x150>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
     fb0:	69bb      	ldr	r3, [r7, #24]
     fb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
     fb4:	88fb      	ldrh	r3, [r7, #6]
     fb6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     fba:	3b01      	subs	r3, #1
     fbc:	009b      	lsls	r3, r3, #2
     fbe:	4413      	add	r3, r2
     fc0:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
     fc2:	697b      	ldr	r3, [r7, #20]
     fc4:	f023 0307 	bic.w	r3, r3, #7
     fc8:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
     fca:	697b      	ldr	r3, [r7, #20]
     fcc:	f003 0307 	and.w	r3, r3, #7
     fd0:	2b00      	cmp	r3, #0
     fd2:	d004      	beq.n	fde <xTaskGenericCreate+0x72>
     fd4:	f04f 0050 	mov.w	r0, #80	; 0x50
     fd8:	f380 8811 	msr	BASEPRI, r0
     fdc:	e7fe      	b.n	fdc <xTaskGenericCreate+0x70>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
     fde:	88fb      	ldrh	r3, [r7, #6]
     fe0:	9300      	str	r3, [sp, #0]
     fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
     fe6:	68b9      	ldr	r1, [r7, #8]
     fe8:	69b8      	ldr	r0, [r7, #24]
     fea:	f000 fc33 	bl	1854 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
     fee:	683a      	ldr	r2, [r7, #0]
     ff0:	68f9      	ldr	r1, [r7, #12]
     ff2:	6978      	ldr	r0, [r7, #20]
     ff4:	f7ff fadd 	bl	5b2 <pxPortInitialiseStack>
     ff8:	4602      	mov	r2, r0
     ffa:	69bb      	ldr	r3, [r7, #24]
     ffc:	601a      	str	r2, [r3, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
     ffe:	69bb      	ldr	r3, [r7, #24]
    1000:	681b      	ldr	r3, [r3, #0]
    1002:	f003 0307 	and.w	r3, r3, #7
    1006:	2b00      	cmp	r3, #0
    1008:	d004      	beq.n	1014 <xTaskGenericCreate+0xa8>
    100a:	f04f 0050 	mov.w	r0, #80	; 0x50
    100e:	f380 8811 	msr	BASEPRI, r0
    1012:	e7fe      	b.n	1012 <xTaskGenericCreate+0xa6>

		if( ( void * ) pxCreatedTask != NULL )
    1014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1016:	2b00      	cmp	r3, #0
    1018:	d002      	beq.n	1020 <xTaskGenericCreate+0xb4>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    101a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    101c:	69ba      	ldr	r2, [r7, #24]
    101e:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    1020:	f7ff fb36 	bl	690 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    1024:	4b31      	ldr	r3, [pc, #196]	; (10ec <xTaskGenericCreate+0x180>)
    1026:	681b      	ldr	r3, [r3, #0]
    1028:	3301      	adds	r3, #1
    102a:	4a30      	ldr	r2, [pc, #192]	; (10ec <xTaskGenericCreate+0x180>)
    102c:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
    102e:	4b30      	ldr	r3, [pc, #192]	; (10f0 <xTaskGenericCreate+0x184>)
    1030:	681b      	ldr	r3, [r3, #0]
    1032:	2b00      	cmp	r3, #0
    1034:	d109      	bne.n	104a <xTaskGenericCreate+0xde>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    1036:	4a2e      	ldr	r2, [pc, #184]	; (10f0 <xTaskGenericCreate+0x184>)
    1038:	69bb      	ldr	r3, [r7, #24]
    103a:	6013      	str	r3, [r2, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    103c:	4b2b      	ldr	r3, [pc, #172]	; (10ec <xTaskGenericCreate+0x180>)
    103e:	681b      	ldr	r3, [r3, #0]
    1040:	2b01      	cmp	r3, #1
    1042:	d10f      	bne.n	1064 <xTaskGenericCreate+0xf8>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    1044:	f000 fc3c 	bl	18c0 <prvInitialiseTaskLists>
    1048:	e00c      	b.n	1064 <xTaskGenericCreate+0xf8>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    104a:	4b2a      	ldr	r3, [pc, #168]	; (10f4 <xTaskGenericCreate+0x188>)
    104c:	681b      	ldr	r3, [r3, #0]
    104e:	2b00      	cmp	r3, #0
    1050:	d108      	bne.n	1064 <xTaskGenericCreate+0xf8>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    1052:	4b27      	ldr	r3, [pc, #156]	; (10f0 <xTaskGenericCreate+0x184>)
    1054:	681b      	ldr	r3, [r3, #0]
    1056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1058:	6abb      	ldr	r3, [r7, #40]	; 0x28
    105a:	429a      	cmp	r2, r3
    105c:	d802      	bhi.n	1064 <xTaskGenericCreate+0xf8>
					{
						pxCurrentTCB = pxNewTCB;
    105e:	4a24      	ldr	r2, [pc, #144]	; (10f0 <xTaskGenericCreate+0x184>)
    1060:	69bb      	ldr	r3, [r7, #24]
    1062:	6013      	str	r3, [r2, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    1064:	69bb      	ldr	r3, [r7, #24]
    1066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1068:	4b23      	ldr	r3, [pc, #140]	; (10f8 <xTaskGenericCreate+0x18c>)
    106a:	681b      	ldr	r3, [r3, #0]
    106c:	429a      	cmp	r2, r3
    106e:	d903      	bls.n	1078 <xTaskGenericCreate+0x10c>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    1070:	69bb      	ldr	r3, [r7, #24]
    1072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1074:	4a20      	ldr	r2, [pc, #128]	; (10f8 <xTaskGenericCreate+0x18c>)
    1076:	6013      	str	r3, [r2, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    1078:	4b20      	ldr	r3, [pc, #128]	; (10fc <xTaskGenericCreate+0x190>)
    107a:	681b      	ldr	r3, [r3, #0]
    107c:	3301      	adds	r3, #1
    107e:	4a1f      	ldr	r2, [pc, #124]	; (10fc <xTaskGenericCreate+0x190>)
    1080:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    1082:	69bb      	ldr	r3, [r7, #24]
    1084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1086:	4b1e      	ldr	r3, [pc, #120]	; (1100 <xTaskGenericCreate+0x194>)
    1088:	681b      	ldr	r3, [r3, #0]
    108a:	429a      	cmp	r2, r3
    108c:	d903      	bls.n	1096 <xTaskGenericCreate+0x12a>
    108e:	69bb      	ldr	r3, [r7, #24]
    1090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1092:	4a1b      	ldr	r2, [pc, #108]	; (1100 <xTaskGenericCreate+0x194>)
    1094:	6013      	str	r3, [r2, #0]
    1096:	69bb      	ldr	r3, [r7, #24]
    1098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    109a:	4613      	mov	r3, r2
    109c:	009b      	lsls	r3, r3, #2
    109e:	4413      	add	r3, r2
    10a0:	009b      	lsls	r3, r3, #2
    10a2:	4a18      	ldr	r2, [pc, #96]	; (1104 <xTaskGenericCreate+0x198>)
    10a4:	441a      	add	r2, r3
    10a6:	69bb      	ldr	r3, [r7, #24]
    10a8:	3304      	adds	r3, #4
    10aa:	4619      	mov	r1, r3
    10ac:	4610      	mov	r0, r2
    10ae:	f7ff f9fa 	bl	4a6 <vListInsertEnd>

			xReturn = pdPASS;
    10b2:	2301      	movs	r3, #1
    10b4:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    10b6:	f7ff fafd 	bl	6b4 <vPortExitCritical>
    10ba:	e002      	b.n	10c2 <xTaskGenericCreate+0x156>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    10bc:	f04f 33ff 	mov.w	r3, #4294967295
    10c0:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    10c2:	69fb      	ldr	r3, [r7, #28]
    10c4:	2b01      	cmp	r3, #1
    10c6:	d10b      	bne.n	10e0 <xTaskGenericCreate+0x174>
	{
		if( xSchedulerRunning != pdFALSE )
    10c8:	4b0a      	ldr	r3, [pc, #40]	; (10f4 <xTaskGenericCreate+0x188>)
    10ca:	681b      	ldr	r3, [r3, #0]
    10cc:	2b00      	cmp	r3, #0
    10ce:	d007      	beq.n	10e0 <xTaskGenericCreate+0x174>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    10d0:	4b07      	ldr	r3, [pc, #28]	; (10f0 <xTaskGenericCreate+0x184>)
    10d2:	681b      	ldr	r3, [r3, #0]
    10d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    10d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    10d8:	429a      	cmp	r2, r3
    10da:	d201      	bcs.n	10e0 <xTaskGenericCreate+0x174>
			{
				portYIELD_WITHIN_API();
    10dc:	f7ff facc 	bl	678 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    10e0:	69fb      	ldr	r3, [r7, #28]
}
    10e2:	4618      	mov	r0, r3
    10e4:	3720      	adds	r7, #32
    10e6:	46bd      	mov	sp, r7
    10e8:	bd80      	pop	{r7, pc}
    10ea:	bf00      	nop
    10ec:	1fff1d04 	.word	0x1fff1d04
    10f0:	1fff1c2c 	.word	0x1fff1c2c
    10f4:	1fff1d14 	.word	0x1fff1d14
    10f8:	1fff1d0c 	.word	0x1fff1d0c
    10fc:	1fff1d28 	.word	0x1fff1d28
    1100:	1fff1d10 	.word	0x1fff1d10
    1104:	1fff1c30 	.word	0x1fff1c30

00001108 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    1108:	b580      	push	{r7, lr}
    110a:	b086      	sub	sp, #24
    110c:	af00      	add	r7, sp, #0
    110e:	6078      	str	r0, [r7, #4]
    1110:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    1112:	2300      	movs	r3, #0
    1114:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
    1116:	687b      	ldr	r3, [r7, #4]
    1118:	2b00      	cmp	r3, #0
    111a:	d104      	bne.n	1126 <vTaskDelayUntil+0x1e>
    111c:	f04f 0050 	mov.w	r0, #80	; 0x50
    1120:	f380 8811 	msr	BASEPRI, r0
    1124:	e7fe      	b.n	1124 <vTaskDelayUntil+0x1c>
		configASSERT( ( xTimeIncrement > 0U ) );
    1126:	683b      	ldr	r3, [r7, #0]
    1128:	2b00      	cmp	r3, #0
    112a:	d104      	bne.n	1136 <vTaskDelayUntil+0x2e>
    112c:	f04f 0050 	mov.w	r0, #80	; 0x50
    1130:	f380 8811 	msr	BASEPRI, r0
    1134:	e7fe      	b.n	1134 <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
    1136:	f000 f87f 	bl	1238 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    113a:	687b      	ldr	r3, [r7, #4]
    113c:	681a      	ldr	r2, [r3, #0]
    113e:	683b      	ldr	r3, [r7, #0]
    1140:	4413      	add	r3, r2
    1142:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    1144:	687b      	ldr	r3, [r7, #4]
    1146:	681a      	ldr	r2, [r3, #0]
    1148:	4b1b      	ldr	r3, [pc, #108]	; (11b8 <vTaskDelayUntil+0xb0>)
    114a:	681b      	ldr	r3, [r3, #0]
    114c:	429a      	cmp	r2, r3
    114e:	d90c      	bls.n	116a <vTaskDelayUntil+0x62>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    1150:	687b      	ldr	r3, [r7, #4]
    1152:	681a      	ldr	r2, [r3, #0]
    1154:	693b      	ldr	r3, [r7, #16]
    1156:	429a      	cmp	r2, r3
    1158:	d913      	bls.n	1182 <vTaskDelayUntil+0x7a>
    115a:	4b17      	ldr	r3, [pc, #92]	; (11b8 <vTaskDelayUntil+0xb0>)
    115c:	681b      	ldr	r3, [r3, #0]
    115e:	693a      	ldr	r2, [r7, #16]
    1160:	429a      	cmp	r2, r3
    1162:	d90e      	bls.n	1182 <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    1164:	2301      	movs	r3, #1
    1166:	617b      	str	r3, [r7, #20]
    1168:	e00b      	b.n	1182 <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    116a:	687b      	ldr	r3, [r7, #4]
    116c:	681a      	ldr	r2, [r3, #0]
    116e:	693b      	ldr	r3, [r7, #16]
    1170:	429a      	cmp	r2, r3
    1172:	d804      	bhi.n	117e <vTaskDelayUntil+0x76>
    1174:	4b10      	ldr	r3, [pc, #64]	; (11b8 <vTaskDelayUntil+0xb0>)
    1176:	681b      	ldr	r3, [r3, #0]
    1178:	693a      	ldr	r2, [r7, #16]
    117a:	429a      	cmp	r2, r3
    117c:	d901      	bls.n	1182 <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    117e:	2301      	movs	r3, #1
    1180:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    1182:	687b      	ldr	r3, [r7, #4]
    1184:	693a      	ldr	r2, [r7, #16]
    1186:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    1188:	697b      	ldr	r3, [r7, #20]
    118a:	2b00      	cmp	r3, #0
    118c:	d008      	beq.n	11a0 <vTaskDelayUntil+0x98>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    118e:	4b0b      	ldr	r3, [pc, #44]	; (11bc <vTaskDelayUntil+0xb4>)
    1190:	681b      	ldr	r3, [r3, #0]
    1192:	3304      	adds	r3, #4
    1194:	4618      	mov	r0, r3
    1196:	f7ff f9e5 	bl	564 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    119a:	6938      	ldr	r0, [r7, #16]
    119c:	f000 fc0a 	bl	19b4 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    11a0:	f000 f858 	bl	1254 <xTaskResumeAll>
    11a4:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    11a6:	68fb      	ldr	r3, [r7, #12]
    11a8:	2b00      	cmp	r3, #0
    11aa:	d101      	bne.n	11b0 <vTaskDelayUntil+0xa8>
		{
			portYIELD_WITHIN_API();
    11ac:	f7ff fa64 	bl	678 <vPortYieldFromISR>
		}
	}
    11b0:	bf00      	nop
    11b2:	3718      	adds	r7, #24
    11b4:	46bd      	mov	sp, r7
    11b6:	bd80      	pop	{r7, pc}
    11b8:	1fff1d08 	.word	0x1fff1d08
    11bc:	1fff1c2c 	.word	0x1fff1c2c

000011c0 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    11c0:	b580      	push	{r7, lr}
    11c2:	b086      	sub	sp, #24
    11c4:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    11c6:	2300      	movs	r3, #0
    11c8:	9303      	str	r3, [sp, #12]
    11ca:	2300      	movs	r3, #0
    11cc:	9302      	str	r3, [sp, #8]
    11ce:	2300      	movs	r3, #0
    11d0:	9301      	str	r3, [sp, #4]
    11d2:	2300      	movs	r3, #0
    11d4:	9300      	str	r3, [sp, #0]
    11d6:	2300      	movs	r3, #0
    11d8:	2246      	movs	r2, #70	; 0x46
    11da:	4913      	ldr	r1, [pc, #76]	; (1228 <vTaskStartScheduler+0x68>)
    11dc:	4813      	ldr	r0, [pc, #76]	; (122c <vTaskStartScheduler+0x6c>)
    11de:	f7ff fec5 	bl	f6c <xTaskGenericCreate>
    11e2:	6078      	str	r0, [r7, #4]
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    11e4:	687b      	ldr	r3, [r7, #4]
    11e6:	2b01      	cmp	r3, #1
    11e8:	d102      	bne.n	11f0 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
    11ea:	f000 fd1f 	bl	1c2c <xTimerCreateTimerTask>
    11ee:	6078      	str	r0, [r7, #4]
		}
	}
	#endif

	if( xReturn == pdPASS )
    11f0:	687b      	ldr	r3, [r7, #4]
    11f2:	2b01      	cmp	r3, #1
    11f4:	d10b      	bne.n	120e <vTaskStartScheduler+0x4e>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    11f6:	f04f 0050 	mov.w	r0, #80	; 0x50
    11fa:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    11fe:	4b0c      	ldr	r3, [pc, #48]	; (1230 <vTaskStartScheduler+0x70>)
    1200:	2201      	movs	r2, #1
    1202:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    1204:	4b0b      	ldr	r3, [pc, #44]	; (1234 <vTaskStartScheduler+0x74>)
    1206:	2200      	movs	r2, #0
    1208:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    120a:	f7ff fa19 	bl	640 <xPortStartScheduler>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
    120e:	687b      	ldr	r3, [r7, #4]
    1210:	2b00      	cmp	r3, #0
    1212:	d104      	bne.n	121e <vTaskStartScheduler+0x5e>
    1214:	f04f 0050 	mov.w	r0, #80	; 0x50
    1218:	f380 8811 	msr	BASEPRI, r0
    121c:	e7fe      	b.n	121c <vTaskStartScheduler+0x5c>
}
    121e:	bf00      	nop
    1220:	3708      	adds	r7, #8
    1222:	46bd      	mov	sp, r7
    1224:	bd80      	pop	{r7, pc}
    1226:	bf00      	nop
    1228:	000025ec 	.word	0x000025ec
    122c:	00001831 	.word	0x00001831
    1230:	1fff1d14 	.word	0x1fff1d14
    1234:	1fff1d08 	.word	0x1fff1d08

00001238 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    1238:	b480      	push	{r7}
    123a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    123c:	4b04      	ldr	r3, [pc, #16]	; (1250 <vTaskSuspendAll+0x18>)
    123e:	681b      	ldr	r3, [r3, #0]
    1240:	3301      	adds	r3, #1
    1242:	4a03      	ldr	r2, [pc, #12]	; (1250 <vTaskSuspendAll+0x18>)
    1244:	6013      	str	r3, [r2, #0]
}
    1246:	bf00      	nop
    1248:	46bd      	mov	sp, r7
    124a:	bc80      	pop	{r7}
    124c:	4770      	bx	lr
    124e:	bf00      	nop
    1250:	1fff1d18 	.word	0x1fff1d18

00001254 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    1254:	b590      	push	{r4, r7, lr}
    1256:	b083      	sub	sp, #12
    1258:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    125a:	2300      	movs	r3, #0
    125c:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    125e:	4b37      	ldr	r3, [pc, #220]	; (133c <xTaskResumeAll+0xe8>)
    1260:	681b      	ldr	r3, [r3, #0]
    1262:	2b00      	cmp	r3, #0
    1264:	d104      	bne.n	1270 <xTaskResumeAll+0x1c>
    1266:	f04f 0050 	mov.w	r0, #80	; 0x50
    126a:	f380 8811 	msr	BASEPRI, r0
    126e:	e7fe      	b.n	126e <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    1270:	f7ff fa0e 	bl	690 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    1274:	4b31      	ldr	r3, [pc, #196]	; (133c <xTaskResumeAll+0xe8>)
    1276:	681b      	ldr	r3, [r3, #0]
    1278:	3b01      	subs	r3, #1
    127a:	4a30      	ldr	r2, [pc, #192]	; (133c <xTaskResumeAll+0xe8>)
    127c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    127e:	4b2f      	ldr	r3, [pc, #188]	; (133c <xTaskResumeAll+0xe8>)
    1280:	681b      	ldr	r3, [r3, #0]
    1282:	2b00      	cmp	r3, #0
    1284:	d152      	bne.n	132c <xTaskResumeAll+0xd8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    1286:	4b2e      	ldr	r3, [pc, #184]	; (1340 <xTaskResumeAll+0xec>)
    1288:	681b      	ldr	r3, [r3, #0]
    128a:	2b00      	cmp	r3, #0
    128c:	d04e      	beq.n	132c <xTaskResumeAll+0xd8>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    128e:	2300      	movs	r3, #0
    1290:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    1292:	e027      	b.n	12e4 <xTaskResumeAll+0x90>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    1294:	4b2b      	ldr	r3, [pc, #172]	; (1344 <xTaskResumeAll+0xf0>)
    1296:	68db      	ldr	r3, [r3, #12]
    1298:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    129a:	f104 0318 	add.w	r3, r4, #24
    129e:	4618      	mov	r0, r3
    12a0:	f7ff f960 	bl	564 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    12a4:	1d23      	adds	r3, r4, #4
    12a6:	4618      	mov	r0, r3
    12a8:	f7ff f95c 	bl	564 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    12ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    12ae:	4b26      	ldr	r3, [pc, #152]	; (1348 <xTaskResumeAll+0xf4>)
    12b0:	681b      	ldr	r3, [r3, #0]
    12b2:	429a      	cmp	r2, r3
    12b4:	d902      	bls.n	12bc <xTaskResumeAll+0x68>
    12b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    12b8:	4a23      	ldr	r2, [pc, #140]	; (1348 <xTaskResumeAll+0xf4>)
    12ba:	6013      	str	r3, [r2, #0]
    12bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    12be:	4613      	mov	r3, r2
    12c0:	009b      	lsls	r3, r3, #2
    12c2:	4413      	add	r3, r2
    12c4:	009b      	lsls	r3, r3, #2
    12c6:	4a21      	ldr	r2, [pc, #132]	; (134c <xTaskResumeAll+0xf8>)
    12c8:	4413      	add	r3, r2
    12ca:	1d22      	adds	r2, r4, #4
    12cc:	4611      	mov	r1, r2
    12ce:	4618      	mov	r0, r3
    12d0:	f7ff f8e9 	bl	4a6 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    12d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    12d6:	4b1e      	ldr	r3, [pc, #120]	; (1350 <xTaskResumeAll+0xfc>)
    12d8:	681b      	ldr	r3, [r3, #0]
    12da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    12dc:	429a      	cmp	r2, r3
    12de:	d301      	bcc.n	12e4 <xTaskResumeAll+0x90>
					{
						xYieldRequired = pdTRUE;
    12e0:	2301      	movs	r3, #1
    12e2:	603b      	str	r3, [r7, #0]
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    12e4:	4b17      	ldr	r3, [pc, #92]	; (1344 <xTaskResumeAll+0xf0>)
    12e6:	681b      	ldr	r3, [r3, #0]
    12e8:	2b00      	cmp	r3, #0
    12ea:	d1d3      	bne.n	1294 <xTaskResumeAll+0x40>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    12ec:	4b19      	ldr	r3, [pc, #100]	; (1354 <xTaskResumeAll+0x100>)
    12ee:	681b      	ldr	r3, [r3, #0]
    12f0:	2b00      	cmp	r3, #0
    12f2:	d00d      	beq.n	1310 <xTaskResumeAll+0xbc>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    12f4:	e006      	b.n	1304 <xTaskResumeAll+0xb0>
					{
						vTaskIncrementTick();
    12f6:	f000 f843 	bl	1380 <vTaskIncrementTick>
						--uxMissedTicks;
    12fa:	4b16      	ldr	r3, [pc, #88]	; (1354 <xTaskResumeAll+0x100>)
    12fc:	681b      	ldr	r3, [r3, #0]
    12fe:	3b01      	subs	r3, #1
    1300:	4a14      	ldr	r2, [pc, #80]	; (1354 <xTaskResumeAll+0x100>)
    1302:	6013      	str	r3, [r2, #0]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    1304:	4b13      	ldr	r3, [pc, #76]	; (1354 <xTaskResumeAll+0x100>)
    1306:	681b      	ldr	r3, [r3, #0]
    1308:	2b00      	cmp	r3, #0
    130a:	d1f4      	bne.n	12f6 <xTaskResumeAll+0xa2>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    130c:	2301      	movs	r3, #1
    130e:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    1310:	683b      	ldr	r3, [r7, #0]
    1312:	2b01      	cmp	r3, #1
    1314:	d003      	beq.n	131e <xTaskResumeAll+0xca>
    1316:	4b10      	ldr	r3, [pc, #64]	; (1358 <xTaskResumeAll+0x104>)
    1318:	681b      	ldr	r3, [r3, #0]
    131a:	2b01      	cmp	r3, #1
    131c:	d106      	bne.n	132c <xTaskResumeAll+0xd8>
				{
					xAlreadyYielded = pdTRUE;
    131e:	2301      	movs	r3, #1
    1320:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    1322:	4b0d      	ldr	r3, [pc, #52]	; (1358 <xTaskResumeAll+0x104>)
    1324:	2200      	movs	r2, #0
    1326:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    1328:	f7ff f9a6 	bl	678 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    132c:	f7ff f9c2 	bl	6b4 <vPortExitCritical>

	return xAlreadyYielded;
    1330:	687b      	ldr	r3, [r7, #4]
}
    1332:	4618      	mov	r0, r3
    1334:	370c      	adds	r7, #12
    1336:	46bd      	mov	sp, r7
    1338:	bd90      	pop	{r4, r7, pc}
    133a:	bf00      	nop
    133c:	1fff1d18 	.word	0x1fff1d18
    1340:	1fff1d04 	.word	0x1fff1d04
    1344:	1fff1cc4 	.word	0x1fff1cc4
    1348:	1fff1d10 	.word	0x1fff1d10
    134c:	1fff1c30 	.word	0x1fff1c30
    1350:	1fff1c2c 	.word	0x1fff1c2c
    1354:	1fff1d1c 	.word	0x1fff1d1c
    1358:	1fff1d20 	.word	0x1fff1d20

0000135c <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    135c:	b580      	push	{r7, lr}
    135e:	b082      	sub	sp, #8
    1360:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    1362:	f7ff f995 	bl	690 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    1366:	4b05      	ldr	r3, [pc, #20]	; (137c <xTaskGetTickCount+0x20>)
    1368:	681b      	ldr	r3, [r3, #0]
    136a:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    136c:	f7ff f9a2 	bl	6b4 <vPortExitCritical>

	return xTicks;
    1370:	687b      	ldr	r3, [r7, #4]
}
    1372:	4618      	mov	r0, r3
    1374:	3708      	adds	r7, #8
    1376:	46bd      	mov	sp, r7
    1378:	bd80      	pop	{r7, pc}
    137a:	bf00      	nop
    137c:	1fff1d08 	.word	0x1fff1d08

00001380 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    1380:	b580      	push	{r7, lr}
    1382:	b084      	sub	sp, #16
    1384:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    1386:	4b49      	ldr	r3, [pc, #292]	; (14ac <vTaskIncrementTick+0x12c>)
    1388:	681b      	ldr	r3, [r3, #0]
    138a:	2b00      	cmp	r3, #0
    138c:	d17c      	bne.n	1488 <vTaskIncrementTick+0x108>
	{
		++xTickCount;
    138e:	4b48      	ldr	r3, [pc, #288]	; (14b0 <vTaskIncrementTick+0x130>)
    1390:	681b      	ldr	r3, [r3, #0]
    1392:	3301      	adds	r3, #1
    1394:	4a46      	ldr	r2, [pc, #280]	; (14b0 <vTaskIncrementTick+0x130>)
    1396:	6013      	str	r3, [r2, #0]
		if( xTickCount == ( portTickType ) 0U )
    1398:	4b45      	ldr	r3, [pc, #276]	; (14b0 <vTaskIncrementTick+0x130>)
    139a:	681b      	ldr	r3, [r3, #0]
    139c:	2b00      	cmp	r3, #0
    139e:	d12b      	bne.n	13f8 <vTaskIncrementTick+0x78>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
    13a0:	4b44      	ldr	r3, [pc, #272]	; (14b4 <vTaskIncrementTick+0x134>)
    13a2:	681b      	ldr	r3, [r3, #0]
    13a4:	681b      	ldr	r3, [r3, #0]
    13a6:	2b00      	cmp	r3, #0
    13a8:	d004      	beq.n	13b4 <vTaskIncrementTick+0x34>
    13aa:	f04f 0050 	mov.w	r0, #80	; 0x50
    13ae:	f380 8811 	msr	BASEPRI, r0
    13b2:	e7fe      	b.n	13b2 <vTaskIncrementTick+0x32>
			
			pxTemp = pxDelayedTaskList;
    13b4:	4b3f      	ldr	r3, [pc, #252]	; (14b4 <vTaskIncrementTick+0x134>)
    13b6:	681b      	ldr	r3, [r3, #0]
    13b8:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    13ba:	4b3f      	ldr	r3, [pc, #252]	; (14b8 <vTaskIncrementTick+0x138>)
    13bc:	681b      	ldr	r3, [r3, #0]
    13be:	4a3d      	ldr	r2, [pc, #244]	; (14b4 <vTaskIncrementTick+0x134>)
    13c0:	6013      	str	r3, [r2, #0]
			pxOverflowDelayedTaskList = pxTemp;
    13c2:	4a3d      	ldr	r2, [pc, #244]	; (14b8 <vTaskIncrementTick+0x138>)
    13c4:	68fb      	ldr	r3, [r7, #12]
    13c6:	6013      	str	r3, [r2, #0]
			xNumOfOverflows++;
    13c8:	4b3c      	ldr	r3, [pc, #240]	; (14bc <vTaskIncrementTick+0x13c>)
    13ca:	681b      	ldr	r3, [r3, #0]
    13cc:	3301      	adds	r3, #1
    13ce:	4a3b      	ldr	r2, [pc, #236]	; (14bc <vTaskIncrementTick+0x13c>)
    13d0:	6013      	str	r3, [r2, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    13d2:	4b38      	ldr	r3, [pc, #224]	; (14b4 <vTaskIncrementTick+0x134>)
    13d4:	681b      	ldr	r3, [r3, #0]
    13d6:	681b      	ldr	r3, [r3, #0]
    13d8:	2b00      	cmp	r3, #0
    13da:	d104      	bne.n	13e6 <vTaskIncrementTick+0x66>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    13dc:	4b38      	ldr	r3, [pc, #224]	; (14c0 <vTaskIncrementTick+0x140>)
    13de:	f04f 32ff 	mov.w	r2, #4294967295
    13e2:	601a      	str	r2, [r3, #0]
    13e4:	e008      	b.n	13f8 <vTaskIncrementTick+0x78>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    13e6:	4b33      	ldr	r3, [pc, #204]	; (14b4 <vTaskIncrementTick+0x134>)
    13e8:	681b      	ldr	r3, [r3, #0]
    13ea:	68db      	ldr	r3, [r3, #12]
    13ec:	68db      	ldr	r3, [r3, #12]
    13ee:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    13f0:	68bb      	ldr	r3, [r7, #8]
    13f2:	685b      	ldr	r3, [r3, #4]
    13f4:	4a32      	ldr	r2, [pc, #200]	; (14c0 <vTaskIncrementTick+0x140>)
    13f6:	6013      	str	r3, [r2, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    13f8:	4b2d      	ldr	r3, [pc, #180]	; (14b0 <vTaskIncrementTick+0x130>)
    13fa:	681a      	ldr	r2, [r3, #0]
    13fc:	4b30      	ldr	r3, [pc, #192]	; (14c0 <vTaskIncrementTick+0x140>)
    13fe:	681b      	ldr	r3, [r3, #0]
    1400:	429a      	cmp	r2, r3
    1402:	d348      	bcc.n	1496 <vTaskIncrementTick+0x116>
    1404:	4b2b      	ldr	r3, [pc, #172]	; (14b4 <vTaskIncrementTick+0x134>)
    1406:	681b      	ldr	r3, [r3, #0]
    1408:	681b      	ldr	r3, [r3, #0]
    140a:	2b00      	cmp	r3, #0
    140c:	d104      	bne.n	1418 <vTaskIncrementTick+0x98>
    140e:	4b2c      	ldr	r3, [pc, #176]	; (14c0 <vTaskIncrementTick+0x140>)
    1410:	f04f 32ff 	mov.w	r2, #4294967295
    1414:	601a      	str	r2, [r3, #0]
    1416:	e03e      	b.n	1496 <vTaskIncrementTick+0x116>
    1418:	4b26      	ldr	r3, [pc, #152]	; (14b4 <vTaskIncrementTick+0x134>)
    141a:	681b      	ldr	r3, [r3, #0]
    141c:	68db      	ldr	r3, [r3, #12]
    141e:	68db      	ldr	r3, [r3, #12]
    1420:	60bb      	str	r3, [r7, #8]
    1422:	68bb      	ldr	r3, [r7, #8]
    1424:	685b      	ldr	r3, [r3, #4]
    1426:	607b      	str	r3, [r7, #4]
    1428:	4b21      	ldr	r3, [pc, #132]	; (14b0 <vTaskIncrementTick+0x130>)
    142a:	681a      	ldr	r2, [r3, #0]
    142c:	687b      	ldr	r3, [r7, #4]
    142e:	429a      	cmp	r2, r3
    1430:	d203      	bcs.n	143a <vTaskIncrementTick+0xba>
    1432:	4a23      	ldr	r2, [pc, #140]	; (14c0 <vTaskIncrementTick+0x140>)
    1434:	687b      	ldr	r3, [r7, #4]
    1436:	6013      	str	r3, [r2, #0]
    1438:	e02d      	b.n	1496 <vTaskIncrementTick+0x116>
    143a:	68bb      	ldr	r3, [r7, #8]
    143c:	3304      	adds	r3, #4
    143e:	4618      	mov	r0, r3
    1440:	f7ff f890 	bl	564 <vListRemove>
    1444:	68bb      	ldr	r3, [r7, #8]
    1446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1448:	2b00      	cmp	r3, #0
    144a:	d004      	beq.n	1456 <vTaskIncrementTick+0xd6>
    144c:	68bb      	ldr	r3, [r7, #8]
    144e:	3318      	adds	r3, #24
    1450:	4618      	mov	r0, r3
    1452:	f7ff f887 	bl	564 <vListRemove>
    1456:	68bb      	ldr	r3, [r7, #8]
    1458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    145a:	4b1a      	ldr	r3, [pc, #104]	; (14c4 <vTaskIncrementTick+0x144>)
    145c:	681b      	ldr	r3, [r3, #0]
    145e:	429a      	cmp	r2, r3
    1460:	d903      	bls.n	146a <vTaskIncrementTick+0xea>
    1462:	68bb      	ldr	r3, [r7, #8]
    1464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1466:	4a17      	ldr	r2, [pc, #92]	; (14c4 <vTaskIncrementTick+0x144>)
    1468:	6013      	str	r3, [r2, #0]
    146a:	68bb      	ldr	r3, [r7, #8]
    146c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    146e:	4613      	mov	r3, r2
    1470:	009b      	lsls	r3, r3, #2
    1472:	4413      	add	r3, r2
    1474:	009b      	lsls	r3, r3, #2
    1476:	4a14      	ldr	r2, [pc, #80]	; (14c8 <vTaskIncrementTick+0x148>)
    1478:	441a      	add	r2, r3
    147a:	68bb      	ldr	r3, [r7, #8]
    147c:	3304      	adds	r3, #4
    147e:	4619      	mov	r1, r3
    1480:	4610      	mov	r0, r2
    1482:	f7ff f810 	bl	4a6 <vListInsertEnd>
    1486:	e7bd      	b.n	1404 <vTaskIncrementTick+0x84>
	}
	else
	{
		++uxMissedTicks;
    1488:	4b10      	ldr	r3, [pc, #64]	; (14cc <vTaskIncrementTick+0x14c>)
    148a:	681b      	ldr	r3, [r3, #0]
    148c:	3301      	adds	r3, #1
    148e:	4a0f      	ldr	r2, [pc, #60]	; (14cc <vTaskIncrementTick+0x14c>)
    1490:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    1492:	f000 ffc9 	bl	2428 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    1496:	4b0d      	ldr	r3, [pc, #52]	; (14cc <vTaskIncrementTick+0x14c>)
    1498:	681b      	ldr	r3, [r3, #0]
    149a:	2b00      	cmp	r3, #0
    149c:	d101      	bne.n	14a2 <vTaskIncrementTick+0x122>
		{
			vApplicationTickHook();
    149e:	f000 ffc3 	bl	2428 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    14a2:	bf00      	nop
    14a4:	3710      	adds	r7, #16
    14a6:	46bd      	mov	sp, r7
    14a8:	bd80      	pop	{r7, pc}
    14aa:	bf00      	nop
    14ac:	1fff1d18 	.word	0x1fff1d18
    14b0:	1fff1d08 	.word	0x1fff1d08
    14b4:	1fff1cbc 	.word	0x1fff1cbc
    14b8:	1fff1cc0 	.word	0x1fff1cc0
    14bc:	1fff1d24 	.word	0x1fff1d24
    14c0:	1fff0004 	.word	0x1fff0004
    14c4:	1fff1d10 	.word	0x1fff1d10
    14c8:	1fff1c30 	.word	0x1fff1c30
    14cc:	1fff1d1c 	.word	0x1fff1d1c

000014d0 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    14d0:	b580      	push	{r7, lr}
    14d2:	b082      	sub	sp, #8
    14d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    14d6:	4b34      	ldr	r3, [pc, #208]	; (15a8 <vTaskSwitchContext+0xd8>)
    14d8:	681b      	ldr	r3, [r3, #0]
    14da:	2b00      	cmp	r3, #0
    14dc:	d003      	beq.n	14e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    14de:	4b33      	ldr	r3, [pc, #204]	; (15ac <vTaskSwitchContext+0xdc>)
    14e0:	2201      	movs	r2, #1
    14e2:	601a      	str	r2, [r3, #0]
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
	
		traceTASK_SWITCHED_IN();
	}
}
    14e4:	e05c      	b.n	15a0 <vTaskSwitchContext+0xd0>
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
    14e6:	4b32      	ldr	r3, [pc, #200]	; (15b0 <vTaskSwitchContext+0xe0>)
    14e8:	681b      	ldr	r3, [r3, #0]
    14ea:	681a      	ldr	r2, [r3, #0]
    14ec:	4b30      	ldr	r3, [pc, #192]	; (15b0 <vTaskSwitchContext+0xe0>)
    14ee:	681b      	ldr	r3, [r3, #0]
    14f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    14f2:	429a      	cmp	r2, r3
    14f4:	d808      	bhi.n	1508 <vTaskSwitchContext+0x38>
    14f6:	4b2e      	ldr	r3, [pc, #184]	; (15b0 <vTaskSwitchContext+0xe0>)
    14f8:	681a      	ldr	r2, [r3, #0]
    14fa:	4b2d      	ldr	r3, [pc, #180]	; (15b0 <vTaskSwitchContext+0xe0>)
    14fc:	681b      	ldr	r3, [r3, #0]
    14fe:	3334      	adds	r3, #52	; 0x34
    1500:	4619      	mov	r1, r3
    1502:	4610      	mov	r0, r2
    1504:	f000 ffb5 	bl	2472 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
    1508:	4b29      	ldr	r3, [pc, #164]	; (15b0 <vTaskSwitchContext+0xe0>)
    150a:	681b      	ldr	r3, [r3, #0]
    150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    150e:	2214      	movs	r2, #20
    1510:	4928      	ldr	r1, [pc, #160]	; (15b4 <vTaskSwitchContext+0xe4>)
    1512:	4618      	mov	r0, r3
    1514:	f001 f832 	bl	257c <memcmp>
    1518:	4603      	mov	r3, r0
    151a:	2b00      	cmp	r3, #0
    151c:	d017      	beq.n	154e <vTaskSwitchContext+0x7e>
    151e:	4b24      	ldr	r3, [pc, #144]	; (15b0 <vTaskSwitchContext+0xe0>)
    1520:	681a      	ldr	r2, [r3, #0]
    1522:	4b23      	ldr	r3, [pc, #140]	; (15b0 <vTaskSwitchContext+0xe0>)
    1524:	681b      	ldr	r3, [r3, #0]
    1526:	3334      	adds	r3, #52	; 0x34
    1528:	4619      	mov	r1, r3
    152a:	4610      	mov	r0, r2
    152c:	f000 ffa1 	bl	2472 <vApplicationStackOverflowHook>
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1530:	e00d      	b.n	154e <vTaskSwitchContext+0x7e>
			configASSERT( uxTopReadyPriority );
    1532:	4b21      	ldr	r3, [pc, #132]	; (15b8 <vTaskSwitchContext+0xe8>)
    1534:	681b      	ldr	r3, [r3, #0]
    1536:	2b00      	cmp	r3, #0
    1538:	d104      	bne.n	1544 <vTaskSwitchContext+0x74>
    153a:	f04f 0050 	mov.w	r0, #80	; 0x50
    153e:	f380 8811 	msr	BASEPRI, r0
    1542:	e7fe      	b.n	1542 <vTaskSwitchContext+0x72>
			--uxTopReadyPriority;
    1544:	4b1c      	ldr	r3, [pc, #112]	; (15b8 <vTaskSwitchContext+0xe8>)
    1546:	681b      	ldr	r3, [r3, #0]
    1548:	3b01      	subs	r3, #1
    154a:	4a1b      	ldr	r2, [pc, #108]	; (15b8 <vTaskSwitchContext+0xe8>)
    154c:	6013      	str	r3, [r2, #0]
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    154e:	4b1a      	ldr	r3, [pc, #104]	; (15b8 <vTaskSwitchContext+0xe8>)
    1550:	681a      	ldr	r2, [r3, #0]
    1552:	491a      	ldr	r1, [pc, #104]	; (15bc <vTaskSwitchContext+0xec>)
    1554:	4613      	mov	r3, r2
    1556:	009b      	lsls	r3, r3, #2
    1558:	4413      	add	r3, r2
    155a:	009b      	lsls	r3, r3, #2
    155c:	440b      	add	r3, r1
    155e:	681b      	ldr	r3, [r3, #0]
    1560:	2b00      	cmp	r3, #0
    1562:	d0e6      	beq.n	1532 <vTaskSwitchContext+0x62>
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    1564:	4b14      	ldr	r3, [pc, #80]	; (15b8 <vTaskSwitchContext+0xe8>)
    1566:	681a      	ldr	r2, [r3, #0]
    1568:	4613      	mov	r3, r2
    156a:	009b      	lsls	r3, r3, #2
    156c:	4413      	add	r3, r2
    156e:	009b      	lsls	r3, r3, #2
    1570:	4a12      	ldr	r2, [pc, #72]	; (15bc <vTaskSwitchContext+0xec>)
    1572:	4413      	add	r3, r2
    1574:	607b      	str	r3, [r7, #4]
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	685b      	ldr	r3, [r3, #4]
    157a:	685a      	ldr	r2, [r3, #4]
    157c:	687b      	ldr	r3, [r7, #4]
    157e:	605a      	str	r2, [r3, #4]
    1580:	687b      	ldr	r3, [r7, #4]
    1582:	685a      	ldr	r2, [r3, #4]
    1584:	687b      	ldr	r3, [r7, #4]
    1586:	3308      	adds	r3, #8
    1588:	429a      	cmp	r2, r3
    158a:	d104      	bne.n	1596 <vTaskSwitchContext+0xc6>
    158c:	687b      	ldr	r3, [r7, #4]
    158e:	685b      	ldr	r3, [r3, #4]
    1590:	685a      	ldr	r2, [r3, #4]
    1592:	687b      	ldr	r3, [r7, #4]
    1594:	605a      	str	r2, [r3, #4]
    1596:	687b      	ldr	r3, [r7, #4]
    1598:	685b      	ldr	r3, [r3, #4]
    159a:	68db      	ldr	r3, [r3, #12]
    159c:	4a04      	ldr	r2, [pc, #16]	; (15b0 <vTaskSwitchContext+0xe0>)
    159e:	6013      	str	r3, [r2, #0]
}
    15a0:	bf00      	nop
    15a2:	3708      	adds	r7, #8
    15a4:	46bd      	mov	sp, r7
    15a6:	bd80      	pop	{r7, pc}
    15a8:	1fff1d18 	.word	0x1fff1d18
    15ac:	1fff1d20 	.word	0x1fff1d20
    15b0:	1fff1c2c 	.word	0x1fff1c2c
    15b4:	00002630 	.word	0x00002630
    15b8:	1fff1d10 	.word	0x1fff1d10
    15bc:	1fff1c30 	.word	0x1fff1c30

000015c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    15c0:	b580      	push	{r7, lr}
    15c2:	b084      	sub	sp, #16
    15c4:	af00      	add	r7, sp, #0
    15c6:	6078      	str	r0, [r7, #4]
    15c8:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
    15ca:	687b      	ldr	r3, [r7, #4]
    15cc:	2b00      	cmp	r3, #0
    15ce:	d104      	bne.n	15da <vTaskPlaceOnEventList+0x1a>
    15d0:	f04f 0050 	mov.w	r0, #80	; 0x50
    15d4:	f380 8811 	msr	BASEPRI, r0
    15d8:	e7fe      	b.n	15d8 <vTaskPlaceOnEventList+0x18>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    15da:	4b12      	ldr	r3, [pc, #72]	; (1624 <vTaskPlaceOnEventList+0x64>)
    15dc:	681b      	ldr	r3, [r3, #0]
    15de:	3318      	adds	r3, #24
    15e0:	4619      	mov	r1, r3
    15e2:	6878      	ldr	r0, [r7, #4]
    15e4:	f7fe ff86 	bl	4f4 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    15e8:	4b0e      	ldr	r3, [pc, #56]	; (1624 <vTaskPlaceOnEventList+0x64>)
    15ea:	681b      	ldr	r3, [r3, #0]
    15ec:	3304      	adds	r3, #4
    15ee:	4618      	mov	r0, r3
    15f0:	f7fe ffb8 	bl	564 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    15f4:	683b      	ldr	r3, [r7, #0]
    15f6:	f1b3 3fff 	cmp.w	r3, #4294967295
    15fa:	d107      	bne.n	160c <vTaskPlaceOnEventList+0x4c>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    15fc:	4b09      	ldr	r3, [pc, #36]	; (1624 <vTaskPlaceOnEventList+0x64>)
    15fe:	681b      	ldr	r3, [r3, #0]
    1600:	3304      	adds	r3, #4
    1602:	4619      	mov	r1, r3
    1604:	4808      	ldr	r0, [pc, #32]	; (1628 <vTaskPlaceOnEventList+0x68>)
    1606:	f7fe ff4e 	bl	4a6 <vListInsertEnd>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    160a:	e007      	b.n	161c <vTaskPlaceOnEventList+0x5c>
			xTimeToWake = xTickCount + xTicksToWait;
    160c:	4b07      	ldr	r3, [pc, #28]	; (162c <vTaskPlaceOnEventList+0x6c>)
    160e:	681a      	ldr	r2, [r3, #0]
    1610:	683b      	ldr	r3, [r7, #0]
    1612:	4413      	add	r3, r2
    1614:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    1616:	68f8      	ldr	r0, [r7, #12]
    1618:	f000 f9cc 	bl	19b4 <prvAddCurrentTaskToDelayedList>
}
    161c:	bf00      	nop
    161e:	3710      	adds	r7, #16
    1620:	46bd      	mov	sp, r7
    1622:	bd80      	pop	{r7, pc}
    1624:	1fff1c2c 	.word	0x1fff1c2c
    1628:	1fff1cf0 	.word	0x1fff1cf0
    162c:	1fff1d08 	.word	0x1fff1d08

00001630 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
    1630:	b580      	push	{r7, lr}
    1632:	b084      	sub	sp, #16
    1634:	af00      	add	r7, sp, #0
    1636:	6078      	str	r0, [r7, #4]
    1638:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
    163a:	687b      	ldr	r3, [r7, #4]
    163c:	2b00      	cmp	r3, #0
    163e:	d104      	bne.n	164a <vTaskPlaceOnEventListRestricted+0x1a>
    1640:	f04f 0050 	mov.w	r0, #80	; 0x50
    1644:	f380 8811 	msr	BASEPRI, r0
    1648:	e7fe      	b.n	1648 <vTaskPlaceOnEventListRestricted+0x18>
	
		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    164a:	4b0c      	ldr	r3, [pc, #48]	; (167c <vTaskPlaceOnEventListRestricted+0x4c>)
    164c:	681b      	ldr	r3, [r3, #0]
    164e:	3318      	adds	r3, #24
    1650:	4619      	mov	r1, r3
    1652:	6878      	ldr	r0, [r7, #4]
    1654:	f7fe ff27 	bl	4a6 <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1658:	4b08      	ldr	r3, [pc, #32]	; (167c <vTaskPlaceOnEventListRestricted+0x4c>)
    165a:	681b      	ldr	r3, [r3, #0]
    165c:	3304      	adds	r3, #4
    165e:	4618      	mov	r0, r3
    1660:	f7fe ff80 	bl	564 <vListRemove>

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
    1664:	4b06      	ldr	r3, [pc, #24]	; (1680 <vTaskPlaceOnEventListRestricted+0x50>)
    1666:	681a      	ldr	r2, [r3, #0]
    1668:	683b      	ldr	r3, [r7, #0]
    166a:	4413      	add	r3, r2
    166c:	60fb      	str	r3, [r7, #12]
		prvAddCurrentTaskToDelayedList( xTimeToWake );
    166e:	68f8      	ldr	r0, [r7, #12]
    1670:	f000 f9a0 	bl	19b4 <prvAddCurrentTaskToDelayedList>
	}
    1674:	bf00      	nop
    1676:	3710      	adds	r7, #16
    1678:	46bd      	mov	sp, r7
    167a:	bd80      	pop	{r7, pc}
    167c:	1fff1c2c 	.word	0x1fff1c2c
    1680:	1fff1d08 	.word	0x1fff1d08

00001684 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    1684:	b580      	push	{r7, lr}
    1686:	b084      	sub	sp, #16
    1688:	af00      	add	r7, sp, #0
    168a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    168c:	687b      	ldr	r3, [r7, #4]
    168e:	68db      	ldr	r3, [r3, #12]
    1690:	68db      	ldr	r3, [r3, #12]
    1692:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    1694:	68bb      	ldr	r3, [r7, #8]
    1696:	2b00      	cmp	r3, #0
    1698:	d104      	bne.n	16a4 <xTaskRemoveFromEventList+0x20>
    169a:	f04f 0050 	mov.w	r0, #80	; 0x50
    169e:	f380 8811 	msr	BASEPRI, r0
    16a2:	e7fe      	b.n	16a2 <xTaskRemoveFromEventList+0x1e>
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    16a4:	68bb      	ldr	r3, [r7, #8]
    16a6:	3318      	adds	r3, #24
    16a8:	4618      	mov	r0, r3
    16aa:	f7fe ff5b 	bl	564 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    16ae:	4b1c      	ldr	r3, [pc, #112]	; (1720 <xTaskRemoveFromEventList+0x9c>)
    16b0:	681b      	ldr	r3, [r3, #0]
    16b2:	2b00      	cmp	r3, #0
    16b4:	d11d      	bne.n	16f2 <xTaskRemoveFromEventList+0x6e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    16b6:	68bb      	ldr	r3, [r7, #8]
    16b8:	3304      	adds	r3, #4
    16ba:	4618      	mov	r0, r3
    16bc:	f7fe ff52 	bl	564 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    16c0:	68bb      	ldr	r3, [r7, #8]
    16c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    16c4:	4b17      	ldr	r3, [pc, #92]	; (1724 <xTaskRemoveFromEventList+0xa0>)
    16c6:	681b      	ldr	r3, [r3, #0]
    16c8:	429a      	cmp	r2, r3
    16ca:	d903      	bls.n	16d4 <xTaskRemoveFromEventList+0x50>
    16cc:	68bb      	ldr	r3, [r7, #8]
    16ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    16d0:	4a14      	ldr	r2, [pc, #80]	; (1724 <xTaskRemoveFromEventList+0xa0>)
    16d2:	6013      	str	r3, [r2, #0]
    16d4:	68bb      	ldr	r3, [r7, #8]
    16d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    16d8:	4613      	mov	r3, r2
    16da:	009b      	lsls	r3, r3, #2
    16dc:	4413      	add	r3, r2
    16de:	009b      	lsls	r3, r3, #2
    16e0:	4a11      	ldr	r2, [pc, #68]	; (1728 <xTaskRemoveFromEventList+0xa4>)
    16e2:	441a      	add	r2, r3
    16e4:	68bb      	ldr	r3, [r7, #8]
    16e6:	3304      	adds	r3, #4
    16e8:	4619      	mov	r1, r3
    16ea:	4610      	mov	r0, r2
    16ec:	f7fe fedb 	bl	4a6 <vListInsertEnd>
    16f0:	e005      	b.n	16fe <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    16f2:	68bb      	ldr	r3, [r7, #8]
    16f4:	3318      	adds	r3, #24
    16f6:	4619      	mov	r1, r3
    16f8:	480c      	ldr	r0, [pc, #48]	; (172c <xTaskRemoveFromEventList+0xa8>)
    16fa:	f7fe fed4 	bl	4a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    16fe:	68bb      	ldr	r3, [r7, #8]
    1700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1702:	4b0b      	ldr	r3, [pc, #44]	; (1730 <xTaskRemoveFromEventList+0xac>)
    1704:	681b      	ldr	r3, [r3, #0]
    1706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1708:	429a      	cmp	r2, r3
    170a:	d302      	bcc.n	1712 <xTaskRemoveFromEventList+0x8e>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    170c:	2301      	movs	r3, #1
    170e:	60fb      	str	r3, [r7, #12]
    1710:	e001      	b.n	1716 <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		xReturn = pdFALSE;
    1712:	2300      	movs	r3, #0
    1714:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    1716:	68fb      	ldr	r3, [r7, #12]
}
    1718:	4618      	mov	r0, r3
    171a:	3710      	adds	r7, #16
    171c:	46bd      	mov	sp, r7
    171e:	bd80      	pop	{r7, pc}
    1720:	1fff1d18 	.word	0x1fff1d18
    1724:	1fff1d10 	.word	0x1fff1d10
    1728:	1fff1c30 	.word	0x1fff1c30
    172c:	1fff1cc4 	.word	0x1fff1cc4
    1730:	1fff1c2c 	.word	0x1fff1c2c

00001734 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    1734:	b480      	push	{r7}
    1736:	b083      	sub	sp, #12
    1738:	af00      	add	r7, sp, #0
    173a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
    173c:	687b      	ldr	r3, [r7, #4]
    173e:	2b00      	cmp	r3, #0
    1740:	d104      	bne.n	174c <vTaskSetTimeOutState+0x18>
    1742:	f04f 0050 	mov.w	r0, #80	; 0x50
    1746:	f380 8811 	msr	BASEPRI, r0
    174a:	e7fe      	b.n	174a <vTaskSetTimeOutState+0x16>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    174c:	4b06      	ldr	r3, [pc, #24]	; (1768 <vTaskSetTimeOutState+0x34>)
    174e:	681a      	ldr	r2, [r3, #0]
    1750:	687b      	ldr	r3, [r7, #4]
    1752:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    1754:	4b05      	ldr	r3, [pc, #20]	; (176c <vTaskSetTimeOutState+0x38>)
    1756:	681a      	ldr	r2, [r3, #0]
    1758:	687b      	ldr	r3, [r7, #4]
    175a:	605a      	str	r2, [r3, #4]
}
    175c:	bf00      	nop
    175e:	370c      	adds	r7, #12
    1760:	46bd      	mov	sp, r7
    1762:	bc80      	pop	{r7}
    1764:	4770      	bx	lr
    1766:	bf00      	nop
    1768:	1fff1d24 	.word	0x1fff1d24
    176c:	1fff1d08 	.word	0x1fff1d08

00001770 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    1770:	b580      	push	{r7, lr}
    1772:	b084      	sub	sp, #16
    1774:	af00      	add	r7, sp, #0
    1776:	6078      	str	r0, [r7, #4]
    1778:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	2b00      	cmp	r3, #0
    177e:	d104      	bne.n	178a <xTaskCheckForTimeOut+0x1a>
    1780:	f04f 0050 	mov.w	r0, #80	; 0x50
    1784:	f380 8811 	msr	BASEPRI, r0
    1788:	e7fe      	b.n	1788 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
    178a:	683b      	ldr	r3, [r7, #0]
    178c:	2b00      	cmp	r3, #0
    178e:	d104      	bne.n	179a <xTaskCheckForTimeOut+0x2a>
    1790:	f04f 0050 	mov.w	r0, #80	; 0x50
    1794:	f380 8811 	msr	BASEPRI, r0
    1798:	e7fe      	b.n	1798 <xTaskCheckForTimeOut+0x28>

	taskENTER_CRITICAL();
    179a:	f7fe ff79 	bl	690 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    179e:	683b      	ldr	r3, [r7, #0]
    17a0:	681b      	ldr	r3, [r3, #0]
    17a2:	f1b3 3fff 	cmp.w	r3, #4294967295
    17a6:	d102      	bne.n	17ae <xTaskCheckForTimeOut+0x3e>
			{
				xReturn = pdFALSE;
    17a8:	2300      	movs	r3, #0
    17aa:	60fb      	str	r3, [r7, #12]
    17ac:	e029      	b.n	1802 <xTaskCheckForTimeOut+0x92>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	681a      	ldr	r2, [r3, #0]
    17b2:	4b17      	ldr	r3, [pc, #92]	; (1810 <xTaskCheckForTimeOut+0xa0>)
    17b4:	681b      	ldr	r3, [r3, #0]
    17b6:	429a      	cmp	r2, r3
    17b8:	d008      	beq.n	17cc <xTaskCheckForTimeOut+0x5c>
    17ba:	687b      	ldr	r3, [r7, #4]
    17bc:	685a      	ldr	r2, [r3, #4]
    17be:	4b15      	ldr	r3, [pc, #84]	; (1814 <xTaskCheckForTimeOut+0xa4>)
    17c0:	681b      	ldr	r3, [r3, #0]
    17c2:	429a      	cmp	r2, r3
    17c4:	d802      	bhi.n	17cc <xTaskCheckForTimeOut+0x5c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    17c6:	2301      	movs	r3, #1
    17c8:	60fb      	str	r3, [r7, #12]
    17ca:	e01a      	b.n	1802 <xTaskCheckForTimeOut+0x92>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    17cc:	4b11      	ldr	r3, [pc, #68]	; (1814 <xTaskCheckForTimeOut+0xa4>)
    17ce:	681a      	ldr	r2, [r3, #0]
    17d0:	687b      	ldr	r3, [r7, #4]
    17d2:	685b      	ldr	r3, [r3, #4]
    17d4:	1ad2      	subs	r2, r2, r3
    17d6:	683b      	ldr	r3, [r7, #0]
    17d8:	681b      	ldr	r3, [r3, #0]
    17da:	429a      	cmp	r2, r3
    17dc:	d20f      	bcs.n	17fe <xTaskCheckForTimeOut+0x8e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    17de:	4b0d      	ldr	r3, [pc, #52]	; (1814 <xTaskCheckForTimeOut+0xa4>)
    17e0:	681a      	ldr	r2, [r3, #0]
    17e2:	687b      	ldr	r3, [r7, #4]
    17e4:	685b      	ldr	r3, [r3, #4]
    17e6:	1ad3      	subs	r3, r2, r3
    17e8:	683a      	ldr	r2, [r7, #0]
    17ea:	6812      	ldr	r2, [r2, #0]
    17ec:	1ad2      	subs	r2, r2, r3
    17ee:	683b      	ldr	r3, [r7, #0]
    17f0:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    17f2:	6878      	ldr	r0, [r7, #4]
    17f4:	f7ff ff9e 	bl	1734 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    17f8:	2300      	movs	r3, #0
    17fa:	60fb      	str	r3, [r7, #12]
    17fc:	e001      	b.n	1802 <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			xReturn = pdTRUE;
    17fe:	2301      	movs	r3, #1
    1800:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    1802:	f7fe ff57 	bl	6b4 <vPortExitCritical>

	return xReturn;
    1806:	68fb      	ldr	r3, [r7, #12]
}
    1808:	4618      	mov	r0, r3
    180a:	3710      	adds	r7, #16
    180c:	46bd      	mov	sp, r7
    180e:	bd80      	pop	{r7, pc}
    1810:	1fff1d24 	.word	0x1fff1d24
    1814:	1fff1d08 	.word	0x1fff1d08

00001818 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    1818:	b480      	push	{r7}
    181a:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    181c:	4b03      	ldr	r3, [pc, #12]	; (182c <vTaskMissedYield+0x14>)
    181e:	2201      	movs	r2, #1
    1820:	601a      	str	r2, [r3, #0]
}
    1822:	bf00      	nop
    1824:	46bd      	mov	sp, r7
    1826:	bc80      	pop	{r7}
    1828:	4770      	bx	lr
    182a:	bf00      	nop
    182c:	1fff1d20 	.word	0x1fff1d20

00001830 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    1830:	b580      	push	{r7, lr}
    1832:	b082      	sub	sp, #8
    1834:	af00      	add	r7, sp, #0
    1836:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    1838:	f000 f882 	bl	1940 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    183c:	4b04      	ldr	r3, [pc, #16]	; (1850 <prvIdleTask+0x20>)
    183e:	681b      	ldr	r3, [r3, #0]
    1840:	2b01      	cmp	r3, #1
    1842:	d901      	bls.n	1848 <prvIdleTask+0x18>
			{
				taskYIELD();
    1844:	f7fe ff18 	bl	678 <vPortYieldFromISR>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
    1848:	f000 fe19 	bl	247e <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
    184c:	e7f4      	b.n	1838 <prvIdleTask+0x8>
    184e:	bf00      	nop
    1850:	1fff1c30 	.word	0x1fff1c30

00001854 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    1854:	b580      	push	{r7, lr}
    1856:	b084      	sub	sp, #16
    1858:	af00      	add	r7, sp, #0
    185a:	60f8      	str	r0, [r7, #12]
    185c:	60b9      	str	r1, [r7, #8]
    185e:	607a      	str	r2, [r7, #4]
    1860:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    1862:	68fb      	ldr	r3, [r7, #12]
    1864:	3334      	adds	r3, #52	; 0x34
    1866:	220a      	movs	r2, #10
    1868:	68b9      	ldr	r1, [r7, #8]
    186a:	4618      	mov	r0, r3
    186c:	f000 fea8 	bl	25c0 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    1870:	68fb      	ldr	r3, [r7, #12]
    1872:	2200      	movs	r2, #0
    1874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    1878:	687b      	ldr	r3, [r7, #4]
    187a:	2b04      	cmp	r3, #4
    187c:	d901      	bls.n	1882 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    187e:	2304      	movs	r3, #4
    1880:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    1882:	68fb      	ldr	r3, [r7, #12]
    1884:	687a      	ldr	r2, [r7, #4]
    1886:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    1888:	68fb      	ldr	r3, [r7, #12]
    188a:	687a      	ldr	r2, [r7, #4]
    188c:	641a      	str	r2, [r3, #64]	; 0x40
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    188e:	68fb      	ldr	r3, [r7, #12]
    1890:	3304      	adds	r3, #4
    1892:	4618      	mov	r0, r3
    1894:	f7fe fdfb 	bl	48e <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    1898:	68fb      	ldr	r3, [r7, #12]
    189a:	3318      	adds	r3, #24
    189c:	4618      	mov	r0, r3
    189e:	f7fe fdf6 	bl	48e <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    18a2:	68fb      	ldr	r3, [r7, #12]
    18a4:	68fa      	ldr	r2, [r7, #12]
    18a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    18a8:	687b      	ldr	r3, [r7, #4]
    18aa:	f1c3 0205 	rsb	r2, r3, #5
    18ae:	68fb      	ldr	r3, [r7, #12]
    18b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    18b2:	68fb      	ldr	r3, [r7, #12]
    18b4:	68fa      	ldr	r2, [r7, #12]
    18b6:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    18b8:	bf00      	nop
    18ba:	3710      	adds	r7, #16
    18bc:	46bd      	mov	sp, r7
    18be:	bd80      	pop	{r7, pc}

000018c0 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    18c0:	b580      	push	{r7, lr}
    18c2:	b082      	sub	sp, #8
    18c4:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    18c6:	2300      	movs	r3, #0
    18c8:	607b      	str	r3, [r7, #4]
    18ca:	e00c      	b.n	18e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    18cc:	687a      	ldr	r2, [r7, #4]
    18ce:	4613      	mov	r3, r2
    18d0:	009b      	lsls	r3, r3, #2
    18d2:	4413      	add	r3, r2
    18d4:	009b      	lsls	r3, r3, #2
    18d6:	4a12      	ldr	r2, [pc, #72]	; (1920 <prvInitialiseTaskLists+0x60>)
    18d8:	4413      	add	r3, r2
    18da:	4618      	mov	r0, r3
    18dc:	f7fe fdb8 	bl	450 <vListInitialise>
	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    18e0:	687b      	ldr	r3, [r7, #4]
    18e2:	3301      	adds	r3, #1
    18e4:	607b      	str	r3, [r7, #4]
    18e6:	687b      	ldr	r3, [r7, #4]
    18e8:	2b04      	cmp	r3, #4
    18ea:	d9ef      	bls.n	18cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    18ec:	480d      	ldr	r0, [pc, #52]	; (1924 <prvInitialiseTaskLists+0x64>)
    18ee:	f7fe fdaf 	bl	450 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    18f2:	480d      	ldr	r0, [pc, #52]	; (1928 <prvInitialiseTaskLists+0x68>)
    18f4:	f7fe fdac 	bl	450 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    18f8:	480c      	ldr	r0, [pc, #48]	; (192c <prvInitialiseTaskLists+0x6c>)
    18fa:	f7fe fda9 	bl	450 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    18fe:	480c      	ldr	r0, [pc, #48]	; (1930 <prvInitialiseTaskLists+0x70>)
    1900:	f7fe fda6 	bl	450 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    1904:	480b      	ldr	r0, [pc, #44]	; (1934 <prvInitialiseTaskLists+0x74>)
    1906:	f7fe fda3 	bl	450 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    190a:	4b0b      	ldr	r3, [pc, #44]	; (1938 <prvInitialiseTaskLists+0x78>)
    190c:	4a05      	ldr	r2, [pc, #20]	; (1924 <prvInitialiseTaskLists+0x64>)
    190e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    1910:	4b0a      	ldr	r3, [pc, #40]	; (193c <prvInitialiseTaskLists+0x7c>)
    1912:	4a05      	ldr	r2, [pc, #20]	; (1928 <prvInitialiseTaskLists+0x68>)
    1914:	601a      	str	r2, [r3, #0]
}
    1916:	bf00      	nop
    1918:	3708      	adds	r7, #8
    191a:	46bd      	mov	sp, r7
    191c:	bd80      	pop	{r7, pc}
    191e:	bf00      	nop
    1920:	1fff1c30 	.word	0x1fff1c30
    1924:	1fff1c94 	.word	0x1fff1c94
    1928:	1fff1ca8 	.word	0x1fff1ca8
    192c:	1fff1cc4 	.word	0x1fff1cc4
    1930:	1fff1cd8 	.word	0x1fff1cd8
    1934:	1fff1cf0 	.word	0x1fff1cf0
    1938:	1fff1cbc 	.word	0x1fff1cbc
    193c:	1fff1cc0 	.word	0x1fff1cc0

00001940 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    1940:	b580      	push	{r7, lr}
    1942:	b082      	sub	sp, #8
    1944:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    1946:	4b18      	ldr	r3, [pc, #96]	; (19a8 <prvCheckTasksWaitingTermination+0x68>)
    1948:	681b      	ldr	r3, [r3, #0]
    194a:	2b00      	cmp	r3, #0
    194c:	d028      	beq.n	19a0 <prvCheckTasksWaitingTermination+0x60>
		{
			vTaskSuspendAll();
    194e:	f7ff fc73 	bl	1238 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1952:	4b16      	ldr	r3, [pc, #88]	; (19ac <prvCheckTasksWaitingTermination+0x6c>)
    1954:	681b      	ldr	r3, [r3, #0]
    1956:	2b00      	cmp	r3, #0
    1958:	bf0c      	ite	eq
    195a:	2301      	moveq	r3, #1
    195c:	2300      	movne	r3, #0
    195e:	b2db      	uxtb	r3, r3
    1960:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    1962:	f7ff fc77 	bl	1254 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    1966:	687b      	ldr	r3, [r7, #4]
    1968:	2b00      	cmp	r3, #0
    196a:	d119      	bne.n	19a0 <prvCheckTasksWaitingTermination+0x60>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    196c:	f7fe fe90 	bl	690 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    1970:	4b0e      	ldr	r3, [pc, #56]	; (19ac <prvCheckTasksWaitingTermination+0x6c>)
    1972:	68db      	ldr	r3, [r3, #12]
    1974:	68db      	ldr	r3, [r3, #12]
    1976:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    1978:	683b      	ldr	r3, [r7, #0]
    197a:	3304      	adds	r3, #4
    197c:	4618      	mov	r0, r3
    197e:	f7fe fdf1 	bl	564 <vListRemove>
					--uxCurrentNumberOfTasks;
    1982:	4b0b      	ldr	r3, [pc, #44]	; (19b0 <prvCheckTasksWaitingTermination+0x70>)
    1984:	681b      	ldr	r3, [r3, #0]
    1986:	3b01      	subs	r3, #1
    1988:	4a09      	ldr	r2, [pc, #36]	; (19b0 <prvCheckTasksWaitingTermination+0x70>)
    198a:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
    198c:	4b06      	ldr	r3, [pc, #24]	; (19a8 <prvCheckTasksWaitingTermination+0x68>)
    198e:	681b      	ldr	r3, [r3, #0]
    1990:	3b01      	subs	r3, #1
    1992:	4a05      	ldr	r2, [pc, #20]	; (19a8 <prvCheckTasksWaitingTermination+0x68>)
    1994:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
    1996:	f7fe fe8d 	bl	6b4 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    199a:	6838      	ldr	r0, [r7, #0]
    199c:	f000 f871 	bl	1a82 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    19a0:	bf00      	nop
    19a2:	3708      	adds	r7, #8
    19a4:	46bd      	mov	sp, r7
    19a6:	bd80      	pop	{r7, pc}
    19a8:	1fff1cec 	.word	0x1fff1cec
    19ac:	1fff1cd8 	.word	0x1fff1cd8
    19b0:	1fff1d04 	.word	0x1fff1d04

000019b4 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    19b4:	b580      	push	{r7, lr}
    19b6:	b082      	sub	sp, #8
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    19bc:	4b13      	ldr	r3, [pc, #76]	; (1a0c <prvAddCurrentTaskToDelayedList+0x58>)
    19be:	681b      	ldr	r3, [r3, #0]
    19c0:	687a      	ldr	r2, [r7, #4]
    19c2:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    19c4:	4b12      	ldr	r3, [pc, #72]	; (1a10 <prvAddCurrentTaskToDelayedList+0x5c>)
    19c6:	681b      	ldr	r3, [r3, #0]
    19c8:	687a      	ldr	r2, [r7, #4]
    19ca:	429a      	cmp	r2, r3
    19cc:	d209      	bcs.n	19e2 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    19ce:	4b11      	ldr	r3, [pc, #68]	; (1a14 <prvAddCurrentTaskToDelayedList+0x60>)
    19d0:	681a      	ldr	r2, [r3, #0]
    19d2:	4b0e      	ldr	r3, [pc, #56]	; (1a0c <prvAddCurrentTaskToDelayedList+0x58>)
    19d4:	681b      	ldr	r3, [r3, #0]
    19d6:	3304      	adds	r3, #4
    19d8:	4619      	mov	r1, r3
    19da:	4610      	mov	r0, r2
    19dc:	f7fe fd8a 	bl	4f4 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
		{
			xNextTaskUnblockTime = xTimeToWake;
		}
	}
}
    19e0:	e010      	b.n	1a04 <prvAddCurrentTaskToDelayedList+0x50>
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    19e2:	4b0d      	ldr	r3, [pc, #52]	; (1a18 <prvAddCurrentTaskToDelayedList+0x64>)
    19e4:	681a      	ldr	r2, [r3, #0]
    19e6:	4b09      	ldr	r3, [pc, #36]	; (1a0c <prvAddCurrentTaskToDelayedList+0x58>)
    19e8:	681b      	ldr	r3, [r3, #0]
    19ea:	3304      	adds	r3, #4
    19ec:	4619      	mov	r1, r3
    19ee:	4610      	mov	r0, r2
    19f0:	f7fe fd80 	bl	4f4 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
    19f4:	4b09      	ldr	r3, [pc, #36]	; (1a1c <prvAddCurrentTaskToDelayedList+0x68>)
    19f6:	681b      	ldr	r3, [r3, #0]
    19f8:	687a      	ldr	r2, [r7, #4]
    19fa:	429a      	cmp	r2, r3
    19fc:	d202      	bcs.n	1a04 <prvAddCurrentTaskToDelayedList+0x50>
			xNextTaskUnblockTime = xTimeToWake;
    19fe:	4a07      	ldr	r2, [pc, #28]	; (1a1c <prvAddCurrentTaskToDelayedList+0x68>)
    1a00:	687b      	ldr	r3, [r7, #4]
    1a02:	6013      	str	r3, [r2, #0]
}
    1a04:	bf00      	nop
    1a06:	3708      	adds	r7, #8
    1a08:	46bd      	mov	sp, r7
    1a0a:	bd80      	pop	{r7, pc}
    1a0c:	1fff1c2c 	.word	0x1fff1c2c
    1a10:	1fff1d08 	.word	0x1fff1d08
    1a14:	1fff1cc0 	.word	0x1fff1cc0
    1a18:	1fff1cbc 	.word	0x1fff1cbc
    1a1c:	1fff0004 	.word	0x1fff0004

00001a20 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    1a20:	b580      	push	{r7, lr}
    1a22:	b084      	sub	sp, #16
    1a24:	af00      	add	r7, sp, #0
    1a26:	4603      	mov	r3, r0
    1a28:	6039      	str	r1, [r7, #0]
    1a2a:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    1a2c:	2044      	movs	r0, #68	; 0x44
    1a2e:	f7fe fea3 	bl	778 <pvPortMalloc>
    1a32:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    1a34:	68fb      	ldr	r3, [r7, #12]
    1a36:	2b00      	cmp	r3, #0
    1a38:	d01e      	beq.n	1a78 <prvAllocateTCBAndStack+0x58>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    1a3a:	683b      	ldr	r3, [r7, #0]
    1a3c:	2b00      	cmp	r3, #0
    1a3e:	d106      	bne.n	1a4e <prvAllocateTCBAndStack+0x2e>
    1a40:	88fb      	ldrh	r3, [r7, #6]
    1a42:	009b      	lsls	r3, r3, #2
    1a44:	4618      	mov	r0, r3
    1a46:	f7fe fe97 	bl	778 <pvPortMalloc>
    1a4a:	4603      	mov	r3, r0
    1a4c:	e000      	b.n	1a50 <prvAllocateTCBAndStack+0x30>
    1a4e:	683b      	ldr	r3, [r7, #0]
    1a50:	68fa      	ldr	r2, [r7, #12]
    1a52:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    1a54:	68fb      	ldr	r3, [r7, #12]
    1a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1a58:	2b00      	cmp	r3, #0
    1a5a:	d105      	bne.n	1a68 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    1a5c:	68f8      	ldr	r0, [r7, #12]
    1a5e:	f7fe fec7 	bl	7f0 <vPortFree>
			pxNewTCB = NULL;
    1a62:	2300      	movs	r3, #0
    1a64:	60fb      	str	r3, [r7, #12]
    1a66:	e007      	b.n	1a78 <prvAllocateTCBAndStack+0x58>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    1a68:	68fb      	ldr	r3, [r7, #12]
    1a6a:	6b18      	ldr	r0, [r3, #48]	; 0x30
    1a6c:	88fb      	ldrh	r3, [r7, #6]
    1a6e:	009b      	lsls	r3, r3, #2
    1a70:	461a      	mov	r2, r3
    1a72:	21a5      	movs	r1, #165	; 0xa5
    1a74:	f000 fd9c 	bl	25b0 <memset>
		}
	}

	return pxNewTCB;
    1a78:	68fb      	ldr	r3, [r7, #12]
}
    1a7a:	4618      	mov	r0, r3
    1a7c:	3710      	adds	r7, #16
    1a7e:	46bd      	mov	sp, r7
    1a80:	bd80      	pop	{r7, pc}

00001a82 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    1a82:	b580      	push	{r7, lr}
    1a84:	b082      	sub	sp, #8
    1a86:	af00      	add	r7, sp, #0
    1a88:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    1a8a:	687b      	ldr	r3, [r7, #4]
    1a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1a8e:	4618      	mov	r0, r3
    1a90:	f7fe feae 	bl	7f0 <vPortFree>
		vPortFree( pxTCB );
    1a94:	6878      	ldr	r0, [r7, #4]
    1a96:	f7fe feab 	bl	7f0 <vPortFree>
	}
    1a9a:	bf00      	nop
    1a9c:	3708      	adds	r7, #8
    1a9e:	46bd      	mov	sp, r7
    1aa0:	bd80      	pop	{r7, pc}
	...

00001aa4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    1aa4:	b480      	push	{r7}
    1aa6:	b083      	sub	sp, #12
    1aa8:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    1aaa:	4b04      	ldr	r3, [pc, #16]	; (1abc <xTaskGetCurrentTaskHandle+0x18>)
    1aac:	681b      	ldr	r3, [r3, #0]
    1aae:	607b      	str	r3, [r7, #4]

		return xReturn;
    1ab0:	687b      	ldr	r3, [r7, #4]
	}
    1ab2:	4618      	mov	r0, r3
    1ab4:	370c      	adds	r7, #12
    1ab6:	46bd      	mov	sp, r7
    1ab8:	bc80      	pop	{r7}
    1aba:	4770      	bx	lr
    1abc:	1fff1c2c 	.word	0x1fff1c2c

00001ac0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
    1ac0:	b480      	push	{r7}
    1ac2:	b083      	sub	sp, #12
    1ac4:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
    1ac6:	4b0b      	ldr	r3, [pc, #44]	; (1af4 <xTaskGetSchedulerState+0x34>)
    1ac8:	681b      	ldr	r3, [r3, #0]
    1aca:	2b00      	cmp	r3, #0
    1acc:	d102      	bne.n	1ad4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    1ace:	2300      	movs	r3, #0
    1ad0:	607b      	str	r3, [r7, #4]
    1ad2:	e008      	b.n	1ae6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    1ad4:	4b08      	ldr	r3, [pc, #32]	; (1af8 <xTaskGetSchedulerState+0x38>)
    1ad6:	681b      	ldr	r3, [r3, #0]
    1ad8:	2b00      	cmp	r3, #0
    1ada:	d102      	bne.n	1ae2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    1adc:	2301      	movs	r3, #1
    1ade:	607b      	str	r3, [r7, #4]
    1ae0:	e001      	b.n	1ae6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    1ae2:	2302      	movs	r3, #2
    1ae4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    1ae6:	687b      	ldr	r3, [r7, #4]
	}
    1ae8:	4618      	mov	r0, r3
    1aea:	370c      	adds	r7, #12
    1aec:	46bd      	mov	sp, r7
    1aee:	bc80      	pop	{r7}
    1af0:	4770      	bx	lr
    1af2:	bf00      	nop
    1af4:	1fff1d14 	.word	0x1fff1d14
    1af8:	1fff1d18 	.word	0x1fff1d18

00001afc <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    1afc:	b580      	push	{r7, lr}
    1afe:	b084      	sub	sp, #16
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    1b04:	687b      	ldr	r3, [r7, #4]
    1b06:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );
    1b08:	687b      	ldr	r3, [r7, #4]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d104      	bne.n	1b18 <vTaskPriorityInherit+0x1c>
    1b0e:	f04f 0050 	mov.w	r0, #80	; 0x50
    1b12:	f380 8811 	msr	BASEPRI, r0
    1b16:	e7fe      	b.n	1b16 <vTaskPriorityInherit+0x1a>

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    1b18:	68fb      	ldr	r3, [r7, #12]
    1b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1b1c:	4b21      	ldr	r3, [pc, #132]	; (1ba4 <vTaskPriorityInherit+0xa8>)
    1b1e:	681b      	ldr	r3, [r3, #0]
    1b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1b22:	429a      	cmp	r2, r3
    1b24:	d23a      	bcs.n	1b9c <vTaskPriorityInherit+0xa0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    1b26:	4b1f      	ldr	r3, [pc, #124]	; (1ba4 <vTaskPriorityInherit+0xa8>)
    1b28:	681b      	ldr	r3, [r3, #0]
    1b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1b2c:	f1c3 0205 	rsb	r2, r3, #5
    1b30:	68fb      	ldr	r3, [r7, #12]
    1b32:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    1b34:	68fb      	ldr	r3, [r7, #12]
    1b36:	6959      	ldr	r1, [r3, #20]
    1b38:	68fb      	ldr	r3, [r7, #12]
    1b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1b3c:	4613      	mov	r3, r2
    1b3e:	009b      	lsls	r3, r3, #2
    1b40:	4413      	add	r3, r2
    1b42:	009b      	lsls	r3, r3, #2
    1b44:	4a18      	ldr	r2, [pc, #96]	; (1ba8 <vTaskPriorityInherit+0xac>)
    1b46:	4413      	add	r3, r2
    1b48:	4299      	cmp	r1, r3
    1b4a:	d122      	bne.n	1b92 <vTaskPriorityInherit+0x96>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    1b4c:	68fb      	ldr	r3, [r7, #12]
    1b4e:	3304      	adds	r3, #4
    1b50:	4618      	mov	r0, r3
    1b52:	f7fe fd07 	bl	564 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1b56:	4b13      	ldr	r3, [pc, #76]	; (1ba4 <vTaskPriorityInherit+0xa8>)
    1b58:	681b      	ldr	r3, [r3, #0]
    1b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1b5c:	68fb      	ldr	r3, [r7, #12]
    1b5e:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    1b60:	68fb      	ldr	r3, [r7, #12]
    1b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1b64:	4b11      	ldr	r3, [pc, #68]	; (1bac <vTaskPriorityInherit+0xb0>)
    1b66:	681b      	ldr	r3, [r3, #0]
    1b68:	429a      	cmp	r2, r3
    1b6a:	d903      	bls.n	1b74 <vTaskPriorityInherit+0x78>
    1b6c:	68fb      	ldr	r3, [r7, #12]
    1b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1b70:	4a0e      	ldr	r2, [pc, #56]	; (1bac <vTaskPriorityInherit+0xb0>)
    1b72:	6013      	str	r3, [r2, #0]
    1b74:	68fb      	ldr	r3, [r7, #12]
    1b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1b78:	4613      	mov	r3, r2
    1b7a:	009b      	lsls	r3, r3, #2
    1b7c:	4413      	add	r3, r2
    1b7e:	009b      	lsls	r3, r3, #2
    1b80:	4a09      	ldr	r2, [pc, #36]	; (1ba8 <vTaskPriorityInherit+0xac>)
    1b82:	441a      	add	r2, r3
    1b84:	68fb      	ldr	r3, [r7, #12]
    1b86:	3304      	adds	r3, #4
    1b88:	4619      	mov	r1, r3
    1b8a:	4610      	mov	r0, r2
    1b8c:	f7fe fc8b 	bl	4a6 <vListInsertEnd>
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    1b90:	e004      	b.n	1b9c <vTaskPriorityInherit+0xa0>
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1b92:	4b04      	ldr	r3, [pc, #16]	; (1ba4 <vTaskPriorityInherit+0xa8>)
    1b94:	681b      	ldr	r3, [r3, #0]
    1b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1b98:	68fb      	ldr	r3, [r7, #12]
    1b9a:	62da      	str	r2, [r3, #44]	; 0x2c
	}
    1b9c:	bf00      	nop
    1b9e:	3710      	adds	r7, #16
    1ba0:	46bd      	mov	sp, r7
    1ba2:	bd80      	pop	{r7, pc}
    1ba4:	1fff1c2c 	.word	0x1fff1c2c
    1ba8:	1fff1c30 	.word	0x1fff1c30
    1bac:	1fff1d10 	.word	0x1fff1d10

00001bb0 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    1bb0:	b580      	push	{r7, lr}
    1bb2:	b084      	sub	sp, #16
    1bb4:	af00      	add	r7, sp, #0
    1bb6:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    1bb8:	687b      	ldr	r3, [r7, #4]
    1bba:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    1bbc:	687b      	ldr	r3, [r7, #4]
    1bbe:	2b00      	cmp	r3, #0
    1bc0:	d02c      	beq.n	1c1c <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1bc2:	68fb      	ldr	r3, [r7, #12]
    1bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1bc6:	68fb      	ldr	r3, [r7, #12]
    1bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1bca:	429a      	cmp	r2, r3
    1bcc:	d026      	beq.n	1c1c <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    1bce:	68fb      	ldr	r3, [r7, #12]
    1bd0:	3304      	adds	r3, #4
    1bd2:	4618      	mov	r0, r3
    1bd4:	f7fe fcc6 	bl	564 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    1bd8:	68fb      	ldr	r3, [r7, #12]
    1bda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    1bdc:	68fb      	ldr	r3, [r7, #12]
    1bde:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    1be0:	68fb      	ldr	r3, [r7, #12]
    1be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1be4:	f1c3 0205 	rsb	r2, r3, #5
    1be8:	68fb      	ldr	r3, [r7, #12]
    1bea:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    1bec:	68fb      	ldr	r3, [r7, #12]
    1bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1bf0:	4b0c      	ldr	r3, [pc, #48]	; (1c24 <vTaskPriorityDisinherit+0x74>)
    1bf2:	681b      	ldr	r3, [r3, #0]
    1bf4:	429a      	cmp	r2, r3
    1bf6:	d903      	bls.n	1c00 <vTaskPriorityDisinherit+0x50>
    1bf8:	68fb      	ldr	r3, [r7, #12]
    1bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1bfc:	4a09      	ldr	r2, [pc, #36]	; (1c24 <vTaskPriorityDisinherit+0x74>)
    1bfe:	6013      	str	r3, [r2, #0]
    1c00:	68fb      	ldr	r3, [r7, #12]
    1c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1c04:	4613      	mov	r3, r2
    1c06:	009b      	lsls	r3, r3, #2
    1c08:	4413      	add	r3, r2
    1c0a:	009b      	lsls	r3, r3, #2
    1c0c:	4a06      	ldr	r2, [pc, #24]	; (1c28 <vTaskPriorityDisinherit+0x78>)
    1c0e:	441a      	add	r2, r3
    1c10:	68fb      	ldr	r3, [r7, #12]
    1c12:	3304      	adds	r3, #4
    1c14:	4619      	mov	r1, r3
    1c16:	4610      	mov	r0, r2
    1c18:	f7fe fc45 	bl	4a6 <vListInsertEnd>
			}
		}
	}
    1c1c:	bf00      	nop
    1c1e:	3710      	adds	r7, #16
    1c20:	46bd      	mov	sp, r7
    1c22:	bd80      	pop	{r7, pc}
    1c24:	1fff1d10 	.word	0x1fff1d10
    1c28:	1fff1c30 	.word	0x1fff1c30

00001c2c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
    1c2c:	b580      	push	{r7, lr}
    1c2e:	b086      	sub	sp, #24
    1c30:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
    1c32:	2300      	movs	r3, #0
    1c34:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    1c36:	f000 fa7d 	bl	2134 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
    1c3a:	4b10      	ldr	r3, [pc, #64]	; (1c7c <xTimerCreateTimerTask+0x50>)
    1c3c:	681b      	ldr	r3, [r3, #0]
    1c3e:	2b00      	cmp	r3, #0
    1c40:	d00e      	beq.n	1c60 <xTimerCreateTimerTask+0x34>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );	
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
    1c42:	2300      	movs	r3, #0
    1c44:	9303      	str	r3, [sp, #12]
    1c46:	2300      	movs	r3, #0
    1c48:	9302      	str	r3, [sp, #8]
    1c4a:	2300      	movs	r3, #0
    1c4c:	9301      	str	r3, [sp, #4]
    1c4e:	2303      	movs	r3, #3
    1c50:	9300      	str	r3, [sp, #0]
    1c52:	2300      	movs	r3, #0
    1c54:	2246      	movs	r2, #70	; 0x46
    1c56:	490a      	ldr	r1, [pc, #40]	; (1c80 <xTimerCreateTimerTask+0x54>)
    1c58:	480a      	ldr	r0, [pc, #40]	; (1c84 <xTimerCreateTimerTask+0x58>)
    1c5a:	f7ff f987 	bl	f6c <xTaskGenericCreate>
    1c5e:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
    1c60:	687b      	ldr	r3, [r7, #4]
    1c62:	2b00      	cmp	r3, #0
    1c64:	d104      	bne.n	1c70 <xTimerCreateTimerTask+0x44>
    1c66:	f04f 0050 	mov.w	r0, #80	; 0x50
    1c6a:	f380 8811 	msr	BASEPRI, r0
    1c6e:	e7fe      	b.n	1c6e <xTimerCreateTimerTask+0x42>
	return xReturn;
    1c70:	687b      	ldr	r3, [r7, #4]
}
    1c72:	4618      	mov	r0, r3
    1c74:	3708      	adds	r7, #8
    1c76:	46bd      	mov	sp, r7
    1c78:	bd80      	pop	{r7, pc}
    1c7a:	bf00      	nop
    1c7c:	1fff1d5c 	.word	0x1fff1d5c
    1c80:	000025f4 	.word	0x000025f4
    1c84:	00001de9 	.word	0x00001de9

00001c88 <xTimerCreate>:
/*-----------------------------------------------------------*/

xTimerHandle xTimerCreate( const signed char *pcTimerName, portTickType xTimerPeriodInTicks, unsigned portBASE_TYPE uxAutoReload, void *pvTimerID, tmrTIMER_CALLBACK pxCallbackFunction )
{
    1c88:	b580      	push	{r7, lr}
    1c8a:	b086      	sub	sp, #24
    1c8c:	af00      	add	r7, sp, #0
    1c8e:	60f8      	str	r0, [r7, #12]
    1c90:	60b9      	str	r1, [r7, #8]
    1c92:	607a      	str	r2, [r7, #4]
    1c94:	603b      	str	r3, [r7, #0]
xTIMER *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( portTickType ) 0U )
    1c96:	68bb      	ldr	r3, [r7, #8]
    1c98:	2b00      	cmp	r3, #0
    1c9a:	d109      	bne.n	1cb0 <xTimerCreate+0x28>
	{
		pxNewTimer = NULL;
    1c9c:	2300      	movs	r3, #0
    1c9e:	617b      	str	r3, [r7, #20]
		configASSERT( ( xTimerPeriodInTicks > 0 ) );
    1ca0:	68bb      	ldr	r3, [r7, #8]
    1ca2:	2b00      	cmp	r3, #0
    1ca4:	d121      	bne.n	1cea <xTimerCreate+0x62>
    1ca6:	f04f 0050 	mov.w	r0, #80	; 0x50
    1caa:	f380 8811 	msr	BASEPRI, r0
    1cae:	e7fe      	b.n	1cae <xTimerCreate+0x26>
	}
	else
	{
		pxNewTimer = ( xTIMER * ) pvPortMalloc( sizeof( xTIMER ) );
    1cb0:	2028      	movs	r0, #40	; 0x28
    1cb2:	f7fe fd61 	bl	778 <pvPortMalloc>
    1cb6:	6178      	str	r0, [r7, #20]
		if( pxNewTimer != NULL )
    1cb8:	697b      	ldr	r3, [r7, #20]
    1cba:	2b00      	cmp	r3, #0
    1cbc:	d015      	beq.n	1cea <xTimerCreate+0x62>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
    1cbe:	f000 fa39 	bl	2134 <prvCheckForValidListAndQueue>
	
			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
    1cc2:	697b      	ldr	r3, [r7, #20]
    1cc4:	68fa      	ldr	r2, [r7, #12]
    1cc6:	601a      	str	r2, [r3, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    1cc8:	697b      	ldr	r3, [r7, #20]
    1cca:	68ba      	ldr	r2, [r7, #8]
    1ccc:	619a      	str	r2, [r3, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
    1cce:	697b      	ldr	r3, [r7, #20]
    1cd0:	687a      	ldr	r2, [r7, #4]
    1cd2:	61da      	str	r2, [r3, #28]
			pxNewTimer->pvTimerID = pvTimerID;
    1cd4:	697b      	ldr	r3, [r7, #20]
    1cd6:	683a      	ldr	r2, [r7, #0]
    1cd8:	621a      	str	r2, [r3, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    1cda:	697b      	ldr	r3, [r7, #20]
    1cdc:	6a3a      	ldr	r2, [r7, #32]
    1cde:	625a      	str	r2, [r3, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    1ce0:	697b      	ldr	r3, [r7, #20]
    1ce2:	3304      	adds	r3, #4
    1ce4:	4618      	mov	r0, r3
    1ce6:	f7fe fbd2 	bl	48e <vListInitialiseItem>
		{
			traceTIMER_CREATE_FAILED();
		}
	}
	
	return ( xTimerHandle ) pxNewTimer;
    1cea:	697b      	ldr	r3, [r7, #20]
}
    1cec:	4618      	mov	r0, r3
    1cee:	3718      	adds	r7, #24
    1cf0:	46bd      	mov	sp, r7
    1cf2:	bd80      	pop	{r7, pc}

00001cf4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
    1cf4:	b580      	push	{r7, lr}
    1cf6:	b088      	sub	sp, #32
    1cf8:	af00      	add	r7, sp, #0
    1cfa:	60f8      	str	r0, [r7, #12]
    1cfc:	60b9      	str	r1, [r7, #8]
    1cfe:	607a      	str	r2, [r7, #4]
    1d00:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
    1d02:	2300      	movs	r3, #0
    1d04:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    1d06:	4b1a      	ldr	r3, [pc, #104]	; (1d70 <xTimerGenericCommand+0x7c>)
    1d08:	681b      	ldr	r3, [r3, #0]
    1d0a:	2b00      	cmp	r3, #0
    1d0c:	d02a      	beq.n	1d64 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    1d0e:	68bb      	ldr	r3, [r7, #8]
    1d10:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
    1d12:	687b      	ldr	r3, [r7, #4]
    1d14:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
    1d16:	68fb      	ldr	r3, [r7, #12]
    1d18:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
    1d1a:	683b      	ldr	r3, [r7, #0]
    1d1c:	2b00      	cmp	r3, #0
    1d1e:	d118      	bne.n	1d52 <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    1d20:	f7ff fece 	bl	1ac0 <xTaskGetSchedulerState>
    1d24:	4603      	mov	r3, r0
    1d26:	2b01      	cmp	r3, #1
    1d28:	d109      	bne.n	1d3e <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
    1d2a:	4b11      	ldr	r3, [pc, #68]	; (1d70 <xTimerGenericCommand+0x7c>)
    1d2c:	6818      	ldr	r0, [r3, #0]
    1d2e:	f107 0110 	add.w	r1, r7, #16
    1d32:	2300      	movs	r3, #0
    1d34:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1d36:	f7fe fe09 	bl	94c <xQueueGenericSend>
    1d3a:	61f8      	str	r0, [r7, #28]
    1d3c:	e012      	b.n	1d64 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    1d3e:	4b0c      	ldr	r3, [pc, #48]	; (1d70 <xTimerGenericCommand+0x7c>)
    1d40:	6818      	ldr	r0, [r3, #0]
    1d42:	f107 0110 	add.w	r1, r7, #16
    1d46:	2300      	movs	r3, #0
    1d48:	2200      	movs	r2, #0
    1d4a:	f7fe fdff 	bl	94c <xQueueGenericSend>
    1d4e:	61f8      	str	r0, [r7, #28]
    1d50:	e008      	b.n	1d64 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    1d52:	4b07      	ldr	r3, [pc, #28]	; (1d70 <xTimerGenericCommand+0x7c>)
    1d54:	6818      	ldr	r0, [r3, #0]
    1d56:	f107 0110 	add.w	r1, r7, #16
    1d5a:	2300      	movs	r3, #0
    1d5c:	683a      	ldr	r2, [r7, #0]
    1d5e:	f7fe fe91 	bl	a84 <xQueueGenericSendFromISR>
    1d62:	61f8      	str	r0, [r7, #28]
		}
		
		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}
	
	return xReturn;
    1d64:	69fb      	ldr	r3, [r7, #28]
}
    1d66:	4618      	mov	r0, r3
    1d68:	3720      	adds	r7, #32
    1d6a:	46bd      	mov	sp, r7
    1d6c:	bd80      	pop	{r7, pc}
    1d6e:	bf00      	nop
    1d70:	1fff1d5c 	.word	0x1fff1d5c

00001d74 <prvProcessExpiredTimer>:
	
#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
    1d74:	b580      	push	{r7, lr}
    1d76:	b086      	sub	sp, #24
    1d78:	af02      	add	r7, sp, #8
    1d7a:	6078      	str	r0, [r7, #4]
    1d7c:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    1d7e:	4b19      	ldr	r3, [pc, #100]	; (1de4 <prvProcessExpiredTimer+0x70>)
    1d80:	681b      	ldr	r3, [r3, #0]
    1d82:	68db      	ldr	r3, [r3, #12]
    1d84:	68db      	ldr	r3, [r3, #12]
    1d86:	60fb      	str	r3, [r7, #12]
	vListRemove( &( pxTimer->xTimerListItem ) );
    1d88:	68fb      	ldr	r3, [r7, #12]
    1d8a:	3304      	adds	r3, #4
    1d8c:	4618      	mov	r0, r3
    1d8e:	f7fe fbe9 	bl	564 <vListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
    1d92:	68fb      	ldr	r3, [r7, #12]
    1d94:	69db      	ldr	r3, [r3, #28]
    1d96:	2b01      	cmp	r3, #1
    1d98:	d11c      	bne.n	1dd4 <prvProcessExpiredTimer+0x60>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
    1d9a:	68fb      	ldr	r3, [r7, #12]
    1d9c:	699a      	ldr	r2, [r3, #24]
    1d9e:	687b      	ldr	r3, [r7, #4]
    1da0:	18d1      	adds	r1, r2, r3
    1da2:	687b      	ldr	r3, [r7, #4]
    1da4:	683a      	ldr	r2, [r7, #0]
    1da6:	68f8      	ldr	r0, [r7, #12]
    1da8:	f000 f8ac 	bl	1f04 <prvInsertTimerInActiveList>
    1dac:	4603      	mov	r3, r0
    1dae:	2b01      	cmp	r3, #1
    1db0:	d110      	bne.n	1dd4 <prvProcessExpiredTimer+0x60>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
    1db2:	2300      	movs	r3, #0
    1db4:	9300      	str	r3, [sp, #0]
    1db6:	2300      	movs	r3, #0
    1db8:	687a      	ldr	r2, [r7, #4]
    1dba:	2100      	movs	r1, #0
    1dbc:	68f8      	ldr	r0, [r7, #12]
    1dbe:	f7ff ff99 	bl	1cf4 <xTimerGenericCommand>
    1dc2:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
    1dc4:	68bb      	ldr	r3, [r7, #8]
    1dc6:	2b00      	cmp	r3, #0
    1dc8:	d104      	bne.n	1dd4 <prvProcessExpiredTimer+0x60>
    1dca:	f04f 0050 	mov.w	r0, #80	; 0x50
    1dce:	f380 8811 	msr	BASEPRI, r0
    1dd2:	e7fe      	b.n	1dd2 <prvProcessExpiredTimer+0x5e>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
    1dd4:	68fb      	ldr	r3, [r7, #12]
    1dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1dd8:	68f8      	ldr	r0, [r7, #12]
    1dda:	4798      	blx	r3
}
    1ddc:	bf00      	nop
    1dde:	3710      	adds	r7, #16
    1de0:	46bd      	mov	sp, r7
    1de2:	bd80      	pop	{r7, pc}
    1de4:	1fff1d54 	.word	0x1fff1d54

00001de8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    1de8:	b580      	push	{r7, lr}
    1dea:	b084      	sub	sp, #16
    1dec:	af00      	add	r7, sp, #0
    1dee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    1df0:	f107 0308 	add.w	r3, r7, #8
    1df4:	4618      	mov	r0, r3
    1df6:	f000 f83f 	bl	1e78 <prvGetNextExpireTime>
    1dfa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    1dfc:	68bb      	ldr	r3, [r7, #8]
    1dfe:	4619      	mov	r1, r3
    1e00:	68f8      	ldr	r0, [r7, #12]
    1e02:	f000 f803 	bl	1e0c <prvProcessTimerOrBlockTask>
		
		/* Empty the command queue. */
		prvProcessReceivedCommands();		
    1e06:	f000 f8bf 	bl	1f88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    1e0a:	e7f1      	b.n	1df0 <prvTimerTask+0x8>

00001e0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
    1e0c:	b580      	push	{r7, lr}
    1e0e:	b084      	sub	sp, #16
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
    1e16:	f7ff fa0f 	bl	1238 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1e1a:	f107 0308 	add.w	r3, r7, #8
    1e1e:	4618      	mov	r0, r3
    1e20:	f000 f84e 	bl	1ec0 <prvSampleTimeNow>
    1e24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    1e26:	68bb      	ldr	r3, [r7, #8]
    1e28:	2b00      	cmp	r3, #0
    1e2a:	d11d      	bne.n	1e68 <prvProcessTimerOrBlockTask+0x5c>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    1e2c:	683b      	ldr	r3, [r7, #0]
    1e2e:	2b00      	cmp	r3, #0
    1e30:	d10a      	bne.n	1e48 <prvProcessTimerOrBlockTask+0x3c>
    1e32:	687a      	ldr	r2, [r7, #4]
    1e34:	68fb      	ldr	r3, [r7, #12]
    1e36:	429a      	cmp	r2, r3
    1e38:	d806      	bhi.n	1e48 <prvProcessTimerOrBlockTask+0x3c>
			{
				xTaskResumeAll();
    1e3a:	f7ff fa0b 	bl	1254 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    1e3e:	68f9      	ldr	r1, [r7, #12]
    1e40:	6878      	ldr	r0, [r7, #4]
    1e42:	f7ff ff97 	bl	1d74 <prvProcessExpiredTimer>
		else
		{
			xTaskResumeAll();
		}
	}
}
    1e46:	e011      	b.n	1e6c <prvProcessTimerOrBlockTask+0x60>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
    1e48:	4b0a      	ldr	r3, [pc, #40]	; (1e74 <prvProcessTimerOrBlockTask+0x68>)
    1e4a:	6818      	ldr	r0, [r3, #0]
    1e4c:	687a      	ldr	r2, [r7, #4]
    1e4e:	68fb      	ldr	r3, [r7, #12]
    1e50:	1ad3      	subs	r3, r2, r3
    1e52:	4619      	mov	r1, r3
    1e54:	f7ff f860 	bl	f18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
    1e58:	f7ff f9fc 	bl	1254 <xTaskResumeAll>
    1e5c:	4603      	mov	r3, r0
    1e5e:	2b00      	cmp	r3, #0
    1e60:	d104      	bne.n	1e6c <prvProcessTimerOrBlockTask+0x60>
					portYIELD_WITHIN_API();
    1e62:	f7fe fc09 	bl	678 <vPortYieldFromISR>
}
    1e66:	e001      	b.n	1e6c <prvProcessTimerOrBlockTask+0x60>
			xTaskResumeAll();
    1e68:	f7ff f9f4 	bl	1254 <xTaskResumeAll>
}
    1e6c:	bf00      	nop
    1e6e:	3710      	adds	r7, #16
    1e70:	46bd      	mov	sp, r7
    1e72:	bd80      	pop	{r7, pc}
    1e74:	1fff1d5c 	.word	0x1fff1d5c

00001e78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
    1e78:	b480      	push	{r7}
    1e7a:	b085      	sub	sp, #20
    1e7c:	af00      	add	r7, sp, #0
    1e7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    1e80:	4b0e      	ldr	r3, [pc, #56]	; (1ebc <prvGetNextExpireTime+0x44>)
    1e82:	681b      	ldr	r3, [r3, #0]
    1e84:	681b      	ldr	r3, [r3, #0]
    1e86:	2b00      	cmp	r3, #0
    1e88:	bf0c      	ite	eq
    1e8a:	2301      	moveq	r3, #1
    1e8c:	2300      	movne	r3, #0
    1e8e:	b2db      	uxtb	r3, r3
    1e90:	461a      	mov	r2, r3
    1e92:	687b      	ldr	r3, [r7, #4]
    1e94:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	681b      	ldr	r3, [r3, #0]
    1e9a:	2b00      	cmp	r3, #0
    1e9c:	d105      	bne.n	1eaa <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    1e9e:	4b07      	ldr	r3, [pc, #28]	; (1ebc <prvGetNextExpireTime+0x44>)
    1ea0:	681b      	ldr	r3, [r3, #0]
    1ea2:	68db      	ldr	r3, [r3, #12]
    1ea4:	681b      	ldr	r3, [r3, #0]
    1ea6:	60fb      	str	r3, [r7, #12]
    1ea8:	e001      	b.n	1eae <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
    1eaa:	2300      	movs	r3, #0
    1eac:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    1eae:	68fb      	ldr	r3, [r7, #12]
}
    1eb0:	4618      	mov	r0, r3
    1eb2:	3714      	adds	r7, #20
    1eb4:	46bd      	mov	sp, r7
    1eb6:	bc80      	pop	{r7}
    1eb8:	4770      	bx	lr
    1eba:	bf00      	nop
    1ebc:	1fff1d54 	.word	0x1fff1d54

00001ec0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
    1ec0:	b580      	push	{r7, lr}
    1ec2:	b084      	sub	sp, #16
    1ec4:	af00      	add	r7, sp, #0
    1ec6:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
    1ec8:	f7ff fa48 	bl	135c <xTaskGetTickCount>
    1ecc:	60f8      	str	r0, [r7, #12]
	
	if( xTimeNow < xLastTime )
    1ece:	4b0c      	ldr	r3, [pc, #48]	; (1f00 <prvSampleTimeNow+0x40>)
    1ed0:	681b      	ldr	r3, [r3, #0]
    1ed2:	68fa      	ldr	r2, [r7, #12]
    1ed4:	429a      	cmp	r2, r3
    1ed6:	d208      	bcs.n	1eea <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
    1ed8:	4b09      	ldr	r3, [pc, #36]	; (1f00 <prvSampleTimeNow+0x40>)
    1eda:	681b      	ldr	r3, [r3, #0]
    1edc:	4618      	mov	r0, r3
    1ede:	f000 f8cd 	bl	207c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	2201      	movs	r2, #1
    1ee6:	601a      	str	r2, [r3, #0]
    1ee8:	e002      	b.n	1ef0 <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    1eea:	687b      	ldr	r3, [r7, #4]
    1eec:	2200      	movs	r2, #0
    1eee:	601a      	str	r2, [r3, #0]
	}
	
	xLastTime = xTimeNow;
    1ef0:	4a03      	ldr	r2, [pc, #12]	; (1f00 <prvSampleTimeNow+0x40>)
    1ef2:	68fb      	ldr	r3, [r7, #12]
    1ef4:	6013      	str	r3, [r2, #0]
	
	return xTimeNow;
    1ef6:	68fb      	ldr	r3, [r7, #12]
}
    1ef8:	4618      	mov	r0, r3
    1efa:	3710      	adds	r7, #16
    1efc:	46bd      	mov	sp, r7
    1efe:	bd80      	pop	{r7, pc}
    1f00:	1fff1d60 	.word	0x1fff1d60

00001f04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
    1f04:	b580      	push	{r7, lr}
    1f06:	b086      	sub	sp, #24
    1f08:	af00      	add	r7, sp, #0
    1f0a:	60f8      	str	r0, [r7, #12]
    1f0c:	60b9      	str	r1, [r7, #8]
    1f0e:	607a      	str	r2, [r7, #4]
    1f10:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
    1f12:	2300      	movs	r3, #0
    1f14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    1f16:	68fb      	ldr	r3, [r7, #12]
    1f18:	68ba      	ldr	r2, [r7, #8]
    1f1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1f1c:	68fb      	ldr	r3, [r7, #12]
    1f1e:	68fa      	ldr	r2, [r7, #12]
    1f20:	611a      	str	r2, [r3, #16]
	
	if( xNextExpiryTime <= xTimeNow )
    1f22:	68ba      	ldr	r2, [r7, #8]
    1f24:	687b      	ldr	r3, [r7, #4]
    1f26:	429a      	cmp	r2, r3
    1f28:	d812      	bhi.n	1f50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
    1f2a:	687a      	ldr	r2, [r7, #4]
    1f2c:	683b      	ldr	r3, [r7, #0]
    1f2e:	1ad2      	subs	r2, r2, r3
    1f30:	68fb      	ldr	r3, [r7, #12]
    1f32:	699b      	ldr	r3, [r3, #24]
    1f34:	429a      	cmp	r2, r3
    1f36:	d302      	bcc.n	1f3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    1f38:	2301      	movs	r3, #1
    1f3a:	617b      	str	r3, [r7, #20]
    1f3c:	e01b      	b.n	1f76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    1f3e:	4b10      	ldr	r3, [pc, #64]	; (1f80 <prvInsertTimerInActiveList+0x7c>)
    1f40:	681a      	ldr	r2, [r3, #0]
    1f42:	68fb      	ldr	r3, [r7, #12]
    1f44:	3304      	adds	r3, #4
    1f46:	4619      	mov	r1, r3
    1f48:	4610      	mov	r0, r2
    1f4a:	f7fe fad3 	bl	4f4 <vListInsert>
    1f4e:	e012      	b.n	1f76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    1f50:	687a      	ldr	r2, [r7, #4]
    1f52:	683b      	ldr	r3, [r7, #0]
    1f54:	429a      	cmp	r2, r3
    1f56:	d206      	bcs.n	1f66 <prvInsertTimerInActiveList+0x62>
    1f58:	68ba      	ldr	r2, [r7, #8]
    1f5a:	683b      	ldr	r3, [r7, #0]
    1f5c:	429a      	cmp	r2, r3
    1f5e:	d302      	bcc.n	1f66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    1f60:	2301      	movs	r3, #1
    1f62:	617b      	str	r3, [r7, #20]
    1f64:	e007      	b.n	1f76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    1f66:	4b07      	ldr	r3, [pc, #28]	; (1f84 <prvInsertTimerInActiveList+0x80>)
    1f68:	681a      	ldr	r2, [r3, #0]
    1f6a:	68fb      	ldr	r3, [r7, #12]
    1f6c:	3304      	adds	r3, #4
    1f6e:	4619      	mov	r1, r3
    1f70:	4610      	mov	r0, r2
    1f72:	f7fe fabf 	bl	4f4 <vListInsert>
		}
	}

	return xProcessTimerNow;
    1f76:	697b      	ldr	r3, [r7, #20]
}
    1f78:	4618      	mov	r0, r3
    1f7a:	3718      	adds	r7, #24
    1f7c:	46bd      	mov	sp, r7
    1f7e:	bd80      	pop	{r7, pc}
    1f80:	1fff1d58 	.word	0x1fff1d58
    1f84:	1fff1d54 	.word	0x1fff1d54

00001f88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    1f88:	b580      	push	{r7, lr}
    1f8a:	b08a      	sub	sp, #40	; 0x28
    1f8c:	af02      	add	r7, sp, #8
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1f8e:	1d3b      	adds	r3, r7, #4
    1f90:	4618      	mov	r0, r3
    1f92:	f7ff ff95 	bl	1ec0 <prvSampleTimeNow>
    1f96:	61f8      	str	r0, [r7, #28]

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
    1f98:	e05f      	b.n	205a <prvProcessReceivedCommands+0xd2>
	{
		pxTimer = xMessage.pxTimer;
    1f9a:	693b      	ldr	r3, [r7, #16]
    1f9c:	61bb      	str	r3, [r7, #24]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
    1f9e:	69bb      	ldr	r3, [r7, #24]
    1fa0:	2b00      	cmp	r3, #0
    1fa2:	d008      	beq.n	1fb6 <prvProcessReceivedCommands+0x2e>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    1fa4:	69bb      	ldr	r3, [r7, #24]
    1fa6:	695b      	ldr	r3, [r3, #20]
    1fa8:	2b00      	cmp	r3, #0
    1faa:	d004      	beq.n	1fb6 <prvProcessReceivedCommands+0x2e>
			{
				/* The timer is in a list, remove it. */
				vListRemove( &( pxTimer->xTimerListItem ) );
    1fac:	69bb      	ldr	r3, [r7, #24]
    1fae:	3304      	adds	r3, #4
    1fb0:	4618      	mov	r0, r3
    1fb2:	f7fe fad7 	bl	564 <vListRemove>
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );
		
		switch( xMessage.xMessageID )
    1fb6:	68bb      	ldr	r3, [r7, #8]
    1fb8:	2b03      	cmp	r3, #3
    1fba:	d84d      	bhi.n	2058 <prvProcessReceivedCommands+0xd0>
    1fbc:	a201      	add	r2, pc, #4	; (adr r2, 1fc4 <prvProcessReceivedCommands+0x3c>)
    1fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1fc2:	bf00      	nop
    1fc4:	00001fd5 	.word	0x00001fd5
    1fc8:	0000205b 	.word	0x0000205b
    1fcc:	00002025 	.word	0x00002025
    1fd0:	00002051 	.word	0x00002051
		{
			case tmrCOMMAND_START :	
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
    1fd4:	68fa      	ldr	r2, [r7, #12]
    1fd6:	69bb      	ldr	r3, [r7, #24]
    1fd8:	699b      	ldr	r3, [r3, #24]
    1fda:	18d1      	adds	r1, r2, r3
    1fdc:	68fb      	ldr	r3, [r7, #12]
    1fde:	69fa      	ldr	r2, [r7, #28]
    1fe0:	69b8      	ldr	r0, [r7, #24]
    1fe2:	f7ff ff8f 	bl	1f04 <prvInsertTimerInActiveList>
    1fe6:	4603      	mov	r3, r0
    1fe8:	2b01      	cmp	r3, #1
    1fea:	d136      	bne.n	205a <prvProcessReceivedCommands+0xd2>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
    1fec:	69bb      	ldr	r3, [r7, #24]
    1fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1ff0:	69b8      	ldr	r0, [r7, #24]
    1ff2:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
    1ff4:	69bb      	ldr	r3, [r7, #24]
    1ff6:	69db      	ldr	r3, [r3, #28]
    1ff8:	2b01      	cmp	r3, #1
    1ffa:	d12e      	bne.n	205a <prvProcessReceivedCommands+0xd2>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    1ffc:	68fa      	ldr	r2, [r7, #12]
    1ffe:	69bb      	ldr	r3, [r7, #24]
    2000:	699b      	ldr	r3, [r3, #24]
    2002:	441a      	add	r2, r3
    2004:	2300      	movs	r3, #0
    2006:	9300      	str	r3, [sp, #0]
    2008:	2300      	movs	r3, #0
    200a:	2100      	movs	r1, #0
    200c:	69b8      	ldr	r0, [r7, #24]
    200e:	f7ff fe71 	bl	1cf4 <xTimerGenericCommand>
    2012:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
    2014:	697b      	ldr	r3, [r7, #20]
    2016:	2b00      	cmp	r3, #0
    2018:	d11f      	bne.n	205a <prvProcessReceivedCommands+0xd2>
    201a:	f04f 0050 	mov.w	r0, #80	; 0x50
    201e:	f380 8811 	msr	BASEPRI, r0
    2022:	e7fe      	b.n	2022 <prvProcessReceivedCommands+0x9a>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
    2024:	68fa      	ldr	r2, [r7, #12]
    2026:	69bb      	ldr	r3, [r7, #24]
    2028:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    202a:	69bb      	ldr	r3, [r7, #24]
    202c:	699b      	ldr	r3, [r3, #24]
    202e:	2b00      	cmp	r3, #0
    2030:	d104      	bne.n	203c <prvProcessReceivedCommands+0xb4>
    2032:	f04f 0050 	mov.w	r0, #80	; 0x50
    2036:	f380 8811 	msr	BASEPRI, r0
    203a:	e7fe      	b.n	203a <prvProcessReceivedCommands+0xb2>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    203c:	69bb      	ldr	r3, [r7, #24]
    203e:	699a      	ldr	r2, [r3, #24]
    2040:	69fb      	ldr	r3, [r7, #28]
    2042:	18d1      	adds	r1, r2, r3
    2044:	69fb      	ldr	r3, [r7, #28]
    2046:	69fa      	ldr	r2, [r7, #28]
    2048:	69b8      	ldr	r0, [r7, #24]
    204a:	f7ff ff5b 	bl	1f04 <prvInsertTimerInActiveList>
				break;
    204e:	e004      	b.n	205a <prvProcessReceivedCommands+0xd2>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
    2050:	69b8      	ldr	r0, [r7, #24]
    2052:	f7fe fbcd 	bl	7f0 <vPortFree>
				break;
    2056:	e000      	b.n	205a <prvProcessReceivedCommands+0xd2>

			default	:			
				/* Don't expect to get here. */
				break;
    2058:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
    205a:	4b07      	ldr	r3, [pc, #28]	; (2078 <prvProcessReceivedCommands+0xf0>)
    205c:	6818      	ldr	r0, [r3, #0]
    205e:	f107 0108 	add.w	r1, r7, #8
    2062:	2300      	movs	r3, #0
    2064:	2200      	movs	r2, #0
    2066:	f7fe fd69 	bl	b3c <xQueueGenericReceive>
    206a:	4603      	mov	r3, r0
    206c:	2b00      	cmp	r3, #0
    206e:	d194      	bne.n	1f9a <prvProcessReceivedCommands+0x12>
		}
	}
}
    2070:	bf00      	nop
    2072:	3720      	adds	r7, #32
    2074:	46bd      	mov	sp, r7
    2076:	bd80      	pop	{r7, pc}
    2078:	1fff1d5c 	.word	0x1fff1d5c

0000207c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
    207c:	b580      	push	{r7, lr}
    207e:	b08a      	sub	sp, #40	; 0x28
    2080:	af02      	add	r7, sp, #8
    2082:	6078      	str	r0, [r7, #4]
	
	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2084:	e03f      	b.n	2106 <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2086:	4b29      	ldr	r3, [pc, #164]	; (212c <prvSwitchTimerLists+0xb0>)
    2088:	681b      	ldr	r3, [r3, #0]
    208a:	68db      	ldr	r3, [r3, #12]
    208c:	681b      	ldr	r3, [r3, #0]
    208e:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    2090:	4b26      	ldr	r3, [pc, #152]	; (212c <prvSwitchTimerLists+0xb0>)
    2092:	681b      	ldr	r3, [r3, #0]
    2094:	68db      	ldr	r3, [r3, #12]
    2096:	68db      	ldr	r3, [r3, #12]
    2098:	61bb      	str	r3, [r7, #24]
		vListRemove( &( pxTimer->xTimerListItem ) );
    209a:	69bb      	ldr	r3, [r7, #24]
    209c:	3304      	adds	r3, #4
    209e:	4618      	mov	r0, r3
    20a0:	f7fe fa60 	bl	564 <vListRemove>

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
    20a4:	69bb      	ldr	r3, [r7, #24]
    20a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    20a8:	69b8      	ldr	r0, [r7, #24]
    20aa:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
    20ac:	69bb      	ldr	r3, [r7, #24]
    20ae:	69db      	ldr	r3, [r3, #28]
    20b0:	2b01      	cmp	r3, #1
    20b2:	d128      	bne.n	2106 <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    20b4:	69bb      	ldr	r3, [r7, #24]
    20b6:	699a      	ldr	r2, [r3, #24]
    20b8:	69fb      	ldr	r3, [r7, #28]
    20ba:	4413      	add	r3, r2
    20bc:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
    20be:	697a      	ldr	r2, [r7, #20]
    20c0:	69fb      	ldr	r3, [r7, #28]
    20c2:	429a      	cmp	r2, r3
    20c4:	d90e      	bls.n	20e4 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    20c6:	69bb      	ldr	r3, [r7, #24]
    20c8:	697a      	ldr	r2, [r7, #20]
    20ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    20cc:	69bb      	ldr	r3, [r7, #24]
    20ce:	69ba      	ldr	r2, [r7, #24]
    20d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    20d2:	4b16      	ldr	r3, [pc, #88]	; (212c <prvSwitchTimerLists+0xb0>)
    20d4:	681a      	ldr	r2, [r3, #0]
    20d6:	69bb      	ldr	r3, [r7, #24]
    20d8:	3304      	adds	r3, #4
    20da:	4619      	mov	r1, r3
    20dc:	4610      	mov	r0, r2
    20de:	f7fe fa09 	bl	4f4 <vListInsert>
    20e2:	e010      	b.n	2106 <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
    20e4:	2300      	movs	r3, #0
    20e6:	9300      	str	r3, [sp, #0]
    20e8:	2300      	movs	r3, #0
    20ea:	69fa      	ldr	r2, [r7, #28]
    20ec:	2100      	movs	r1, #0
    20ee:	69b8      	ldr	r0, [r7, #24]
    20f0:	f7ff fe00 	bl	1cf4 <xTimerGenericCommand>
    20f4:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
    20f6:	693b      	ldr	r3, [r7, #16]
    20f8:	2b00      	cmp	r3, #0
    20fa:	d104      	bne.n	2106 <prvSwitchTimerLists+0x8a>
    20fc:	f04f 0050 	mov.w	r0, #80	; 0x50
    2100:	f380 8811 	msr	BASEPRI, r0
    2104:	e7fe      	b.n	2104 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2106:	4b09      	ldr	r3, [pc, #36]	; (212c <prvSwitchTimerLists+0xb0>)
    2108:	681b      	ldr	r3, [r3, #0]
    210a:	681b      	ldr	r3, [r3, #0]
    210c:	2b00      	cmp	r3, #0
    210e:	d1ba      	bne.n	2086 <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
    2110:	4b06      	ldr	r3, [pc, #24]	; (212c <prvSwitchTimerLists+0xb0>)
    2112:	681b      	ldr	r3, [r3, #0]
    2114:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
    2116:	4b06      	ldr	r3, [pc, #24]	; (2130 <prvSwitchTimerLists+0xb4>)
    2118:	681b      	ldr	r3, [r3, #0]
    211a:	4a04      	ldr	r2, [pc, #16]	; (212c <prvSwitchTimerLists+0xb0>)
    211c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
    211e:	4a04      	ldr	r2, [pc, #16]	; (2130 <prvSwitchTimerLists+0xb4>)
    2120:	68fb      	ldr	r3, [r7, #12]
    2122:	6013      	str	r3, [r2, #0]
}
    2124:	bf00      	nop
    2126:	3720      	adds	r7, #32
    2128:	46bd      	mov	sp, r7
    212a:	bd80      	pop	{r7, pc}
    212c:	1fff1d54 	.word	0x1fff1d54
    2130:	1fff1d58 	.word	0x1fff1d58

00002134 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    2134:	b580      	push	{r7, lr}
    2136:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    2138:	f7fe faaa 	bl	690 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
    213c:	4b0d      	ldr	r3, [pc, #52]	; (2174 <prvCheckForValidListAndQueue+0x40>)
    213e:	681b      	ldr	r3, [r3, #0]
    2140:	2b00      	cmp	r3, #0
    2142:	d113      	bne.n	216c <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
    2144:	480c      	ldr	r0, [pc, #48]	; (2178 <prvCheckForValidListAndQueue+0x44>)
    2146:	f7fe f983 	bl	450 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
    214a:	480c      	ldr	r0, [pc, #48]	; (217c <prvCheckForValidListAndQueue+0x48>)
    214c:	f7fe f980 	bl	450 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
    2150:	4b0b      	ldr	r3, [pc, #44]	; (2180 <prvCheckForValidListAndQueue+0x4c>)
    2152:	4a09      	ldr	r2, [pc, #36]	; (2178 <prvCheckForValidListAndQueue+0x44>)
    2154:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    2156:	4b0b      	ldr	r3, [pc, #44]	; (2184 <prvCheckForValidListAndQueue+0x50>)
    2158:	4a08      	ldr	r2, [pc, #32]	; (217c <prvCheckForValidListAndQueue+0x48>)
    215a:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
    215c:	2200      	movs	r2, #0
    215e:	210c      	movs	r1, #12
    2160:	2005      	movs	r0, #5
    2162:	f7fe fbb3 	bl	8cc <xQueueGenericCreate>
    2166:	4602      	mov	r2, r0
    2168:	4b02      	ldr	r3, [pc, #8]	; (2174 <prvCheckForValidListAndQueue+0x40>)
    216a:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
    216c:	f7fe faa2 	bl	6b4 <vPortExitCritical>
}
    2170:	bf00      	nop
    2172:	bd80      	pop	{r7, pc}
    2174:	1fff1d5c 	.word	0x1fff1d5c
    2178:	1fff1d2c 	.word	0x1fff1d2c
    217c:	1fff1d40 	.word	0x1fff1d40
    2180:	1fff1d54 	.word	0x1fff1d54
    2184:	1fff1d58 	.word	0x1fff1d58

00002188 <Default_Handler>:
/**
 **===========================================================================
 **  Default interrupt handler
 **===========================================================================
 */
void Default_Handler() {
    2188:	b480      	push	{r7}
    218a:	af00      	add	r7, sp, #0
  /* Hang here */
  while (1) {
    218c:	e7fe      	b.n	218c <Default_Handler+0x4>
	...

00002190 <Reset_Handler>:
__attribute__((naked)) void Reset_Handler() {
  /* Data and BSS variables */
  unsigned long *srcdata, *dstdata, *sbss;

  /* Set up the stack pointer */
  asm("ldr sp,=_estack\n\t");
    2190:	f8df d06c 	ldr.w	sp, [pc, #108]	; 2200 <Reset_Handler+0x70>

  srcdata = &_sidata;
    2194:	4e14      	ldr	r6, [pc, #80]	; (21e8 <Reset_Handler+0x58>)
  dstdata = &_sdata;
    2196:	4d15      	ldr	r5, [pc, #84]	; (21ec <Reset_Handler+0x5c>)
  sbss = &_sbss;
    2198:	4c15      	ldr	r4, [pc, #84]	; (21f0 <Reset_Handler+0x60>)

#if (DISABLE_WDOG)
  /* Disable the WDOG module */
  /* WDOG_UNLOCK: WDOGUNLOCK=0xC520 */
  WDOG->UNLOCK = (uint16_t) 0xC520u; /* Key 1 */
    219a:	4b16      	ldr	r3, [pc, #88]	; (21f4 <Reset_Handler+0x64>)
    219c:	f24c 5220 	movw	r2, #50464	; 0xc520
    21a0:	81da      	strh	r2, [r3, #14]
  /* WDOG_UNLOCK : WDOGUNLOCK=0xD928 */
  WDOG->UNLOCK = (uint16_t) 0xD928u; /* Key 2 */
    21a2:	4b14      	ldr	r3, [pc, #80]	; (21f4 <Reset_Handler+0x64>)
    21a4:	f64d 1228 	movw	r2, #55592	; 0xd928
    21a8:	81da      	strh	r2, [r3, #14]
  /* WDOG_STCTRLH: ??=0,DISTESTWDOG=0,BYTESEL=0,TESTSEL=0,TESTWDOG=0,??=0,STNDBYEN=1,WAITEN=1,STOPEN=1,DBGEN=0,ALLOWUPDATE=1,WINEN=0,IRQRSTEN=0,CLKSRC=1,WDOGEN=0 */
  WDOG->STCTRLH = (uint16_t) 0x01D2u;
    21aa:	4b12      	ldr	r3, [pc, #72]	; (21f4 <Reset_Handler+0x64>)
    21ac:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
    21b0:	801a      	strh	r2, [r3, #0]
#endif /* (DISABLE_WDOG) */

  /* Copy data */
  while (dstdata != &_edata) {
    21b2:	e005      	b.n	21c0 <Reset_Handler+0x30>
    *(dstdata++) = *(srcdata++);
    21b4:	462b      	mov	r3, r5
    21b6:	1d1d      	adds	r5, r3, #4
    21b8:	4632      	mov	r2, r6
    21ba:	1d16      	adds	r6, r2, #4
    21bc:	6812      	ldr	r2, [r2, #0]
    21be:	601a      	str	r2, [r3, #0]
  while (dstdata != &_edata) {
    21c0:	4b0d      	ldr	r3, [pc, #52]	; (21f8 <Reset_Handler+0x68>)
    21c2:	429d      	cmp	r5, r3
    21c4:	d1f6      	bne.n	21b4 <Reset_Handler+0x24>
  }

  /* Clear BSS */
  while (sbss != &_ebss) {
    21c6:	e003      	b.n	21d0 <Reset_Handler+0x40>
    *(sbss++) = '\0';
    21c8:	4623      	mov	r3, r4
    21ca:	1d1c      	adds	r4, r3, #4
    21cc:	2200      	movs	r2, #0
    21ce:	601a      	str	r2, [r3, #0]
  while (sbss != &_ebss) {
    21d0:	4b0a      	ldr	r3, [pc, #40]	; (21fc <Reset_Handler+0x6c>)
    21d2:	429c      	cmp	r4, r3
    21d4:	d1f8      	bne.n	21c8 <Reset_Handler+0x38>
  }

  /* Run static constructors */
  __libc_init_array();
    21d6:	f000 f9ad 	bl	2534 <__libc_init_array>

  /* Initialize System */
  SystemInit();
    21da:	f000 f963 	bl	24a4 <SystemInit>

  /* Jump to main */
  main();
    21de:	f000 f835 	bl	224c <main>

  /* In case main returns, use default handler */
  Default_Handler();
    21e2:	f7ff ffd1 	bl	2188 <Default_Handler>
}
    21e6:	bf00      	nop
    21e8:	00002664 	.word	0x00002664
    21ec:	1fff0000 	.word	0x1fff0000
    21f0:	1fff0008 	.word	0x1fff0008
    21f4:	40052000 	.word	0x40052000
    21f8:	1fff0008 	.word	0x1fff0008
    21fc:	1fff1dfc 	.word	0x1fff1dfc
    2200:	20010000 	.word	0x20010000

00002204 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
    2204:	b480      	push	{r7}
    2206:	b085      	sub	sp, #20
    2208:	af00      	add	r7, sp, #0
    220a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
    220c:	687b      	ldr	r3, [r7, #4]
    220e:	f003 0307 	and.w	r3, r3, #7
    2212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
    2214:	4b0c      	ldr	r3, [pc, #48]	; (2248 <NVIC_SetPriorityGrouping+0x44>)
    2216:	68db      	ldr	r3, [r3, #12]
    2218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
    221a:	68ba      	ldr	r2, [r7, #8]
    221c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
    2220:	4013      	ands	r3, r2
    2222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
    2224:	68fb      	ldr	r3, [r7, #12]
    2226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
    2228:	68bb      	ldr	r3, [r7, #8]
    222a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
    222c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    2230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    2234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
    2236:	4a04      	ldr	r2, [pc, #16]	; (2248 <NVIC_SetPriorityGrouping+0x44>)
    2238:	68bb      	ldr	r3, [r7, #8]
    223a:	60d3      	str	r3, [r2, #12]
}
    223c:	bf00      	nop
    223e:	3714      	adds	r7, #20
    2240:	46bd      	mov	sp, r7
    2242:	bc80      	pop	{r7}
    2244:	4770      	bx	lr
    2246:	bf00      	nop
    2248:	e000ed00 	.word	0xe000ed00

0000224c <main>:
static volatile uint32_t ulCountOfReceivedSemaphores = 0;

/*-----------------------------------------------------------*/

int main(void)
{
    224c:	b580      	push	{r7, lr}
    224e:	b086      	sub	sp, #24
    2250:	af04      	add	r7, sp, #16
xTimerHandle xExampleSoftwareTimer = NULL;
    2252:	2300      	movs	r3, #0
    2254:	607b      	str	r3, [r7, #4]

	/* Configure the system ready to run the demo.  The clock configuration
	can be done here if it was not done before main() was called. */
	prvSetupHardware();
    2256:	f000 f91e 	bl	2496 <prvSetupHardware>


	/* Create the queue used by the queue send and queue receive tasks.
	http://www.freertos.org/a00116.html */
	xQueue = xQueueCreate( 	mainQUEUE_LENGTH,		/* The number of items the queue can hold. */
    225a:	2200      	movs	r2, #0
    225c:	2104      	movs	r1, #4
    225e:	2001      	movs	r0, #1
    2260:	f7fe fb34 	bl	8cc <xQueueGenericCreate>
    2264:	4602      	mov	r2, r0
    2266:	4b31      	ldr	r3, [pc, #196]	; (232c <main+0xe0>)
    2268:	601a      	str	r2, [r3, #0]
							sizeof( uint32_t ) );	/* The size of each item the queue holds. */
	/* Add to the registry, for the benefit of kernel aware debugging. */
	vQueueAddToRegistry( xQueue, ( signed char * ) "MainQueue" );
    226a:	4b30      	ldr	r3, [pc, #192]	; (232c <main+0xe0>)
    226c:	681b      	ldr	r3, [r3, #0]
    226e:	4930      	ldr	r1, [pc, #192]	; (2330 <main+0xe4>)
    2270:	4618      	mov	r0, r3
    2272:	f7fe fe29 	bl	ec8 <vQueueAddToRegistry>


	/* Create the semaphore used by the FreeRTOS tick hook function and the
	event semaphore task. */
	vSemaphoreCreateBinary( xEventSemaphore );
    2276:	2203      	movs	r2, #3
    2278:	2100      	movs	r1, #0
    227a:	2001      	movs	r0, #1
    227c:	f7fe fb26 	bl	8cc <xQueueGenericCreate>
    2280:	4602      	mov	r2, r0
    2282:	4b2c      	ldr	r3, [pc, #176]	; (2334 <main+0xe8>)
    2284:	601a      	str	r2, [r3, #0]
    2286:	4b2b      	ldr	r3, [pc, #172]	; (2334 <main+0xe8>)
    2288:	681b      	ldr	r3, [r3, #0]
    228a:	2b00      	cmp	r3, #0
    228c:	d006      	beq.n	229c <main+0x50>
    228e:	4b29      	ldr	r3, [pc, #164]	; (2334 <main+0xe8>)
    2290:	6818      	ldr	r0, [r3, #0]
    2292:	2300      	movs	r3, #0
    2294:	2200      	movs	r2, #0
    2296:	2100      	movs	r1, #0
    2298:	f7fe fb58 	bl	94c <xQueueGenericSend>
	/* Add to the registry, for the benefit of kernel aware debugging. */
	vQueueAddToRegistry( xEventSemaphore, ( signed char * ) "xEventSemaphore" );
    229c:	4b25      	ldr	r3, [pc, #148]	; (2334 <main+0xe8>)
    229e:	681b      	ldr	r3, [r3, #0]
    22a0:	4925      	ldr	r1, [pc, #148]	; (2338 <main+0xec>)
    22a2:	4618      	mov	r0, r3
    22a4:	f7fe fe10 	bl	ec8 <vQueueAddToRegistry>


	/* Create the queue receive task as described in the comments at the top
	of this	file.  http://www.freertos.org/a00125.html */
	xTaskCreate( 	prvQueueReceiveTask,			/* The function that implements the task. */
    22a8:	2300      	movs	r3, #0
    22aa:	9303      	str	r3, [sp, #12]
    22ac:	2300      	movs	r3, #0
    22ae:	9302      	str	r3, [sp, #8]
    22b0:	2300      	movs	r3, #0
    22b2:	9301      	str	r3, [sp, #4]
    22b4:	2302      	movs	r3, #2
    22b6:	9300      	str	r3, [sp, #0]
    22b8:	2300      	movs	r3, #0
    22ba:	2246      	movs	r2, #70	; 0x46
    22bc:	491f      	ldr	r1, [pc, #124]	; (233c <main+0xf0>)
    22be:	4820      	ldr	r0, [pc, #128]	; (2340 <main+0xf4>)
    22c0:	f7fe fe54 	bl	f6c <xTaskGenericCreate>
					NULL );							/* Used to obtain a handle to the created task.  Not used in this simple demo, so set to NULL. */


	/* Create the queue send task in exactly the same way.  Again, this is
	described in the comments at the top of the file. */
	xTaskCreate( 	prvQueueSendTask,
    22c4:	2300      	movs	r3, #0
    22c6:	9303      	str	r3, [sp, #12]
    22c8:	2300      	movs	r3, #0
    22ca:	9302      	str	r3, [sp, #8]
    22cc:	2300      	movs	r3, #0
    22ce:	9301      	str	r3, [sp, #4]
    22d0:	2301      	movs	r3, #1
    22d2:	9300      	str	r3, [sp, #0]
    22d4:	2300      	movs	r3, #0
    22d6:	2246      	movs	r2, #70	; 0x46
    22d8:	491a      	ldr	r1, [pc, #104]	; (2344 <main+0xf8>)
    22da:	481b      	ldr	r0, [pc, #108]	; (2348 <main+0xfc>)
    22dc:	f7fe fe46 	bl	f6c <xTaskGenericCreate>
					NULL );


	/* Create the task that is synchronised with an interrupt using the
	xEventSemaphore semaphore. */
	xTaskCreate( 	prvEventSemaphoreTask,
    22e0:	2300      	movs	r3, #0
    22e2:	9303      	str	r3, [sp, #12]
    22e4:	2300      	movs	r3, #0
    22e6:	9302      	str	r3, [sp, #8]
    22e8:	2300      	movs	r3, #0
    22ea:	9301      	str	r3, [sp, #4]
    22ec:	2304      	movs	r3, #4
    22ee:	9300      	str	r3, [sp, #0]
    22f0:	2300      	movs	r3, #0
    22f2:	2246      	movs	r2, #70	; 0x46
    22f4:	4915      	ldr	r1, [pc, #84]	; (234c <main+0x100>)
    22f6:	4816      	ldr	r0, [pc, #88]	; (2350 <main+0x104>)
    22f8:	f7fe fe38 	bl	f6c <xTaskGenericCreate>
					NULL );


	/* Create the software timer as described in the comments at the top of
	this file.  http://www.freertos.org/FreeRTOS-timers-xTimerCreate.html. */
	xExampleSoftwareTimer = xTimerCreate( 	( const signed char * ) "LEDTimer", /* A text name, purely to help debugging. */
    22fc:	4b15      	ldr	r3, [pc, #84]	; (2354 <main+0x108>)
    22fe:	9300      	str	r3, [sp, #0]
    2300:	2300      	movs	r3, #0
    2302:	2201      	movs	r2, #1
    2304:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    2308:	4813      	ldr	r0, [pc, #76]	; (2358 <main+0x10c>)
    230a:	f7ff fcbd 	bl	1c88 <xTimerCreate>
    230e:	6078      	str	r0, [r7, #4]

	/* Start the created timer.  A block time of zero is used as the timer
	command queue cannot possibly be full here (this is the first timer to
	be created, and it is not yet running).
	http://www.freertos.org/FreeRTOS-timers-xTimerStart.html */
	xTimerStart( xExampleSoftwareTimer, 0 );
    2310:	f7ff f824 	bl	135c <xTaskGetTickCount>
    2314:	4602      	mov	r2, r0
    2316:	2300      	movs	r3, #0
    2318:	9300      	str	r3, [sp, #0]
    231a:	2300      	movs	r3, #0
    231c:	2100      	movs	r1, #0
    231e:	6878      	ldr	r0, [r7, #4]
    2320:	f7ff fce8 	bl	1cf4 <xTimerGenericCommand>

	/* Start the tasks and timer running. */
	vTaskStartScheduler();
    2324:	f7fe ff4c 	bl	11c0 <vTaskStartScheduler>
	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details.  http://www.freertos.org/a00111.html */
	for( ;; );
    2328:	e7fe      	b.n	2328 <main+0xdc>
    232a:	bf00      	nop
    232c:	1fff1d64 	.word	0x1fff1d64
    2330:	000025fc 	.word	0x000025fc
    2334:	1fff1d68 	.word	0x1fff1d68
    2338:	00002608 	.word	0x00002608
    233c:	00002618 	.word	0x00002618
    2340:	000023c9 	.word	0x000023c9
    2344:	0000261c 	.word	0x0000261c
    2348:	00002391 	.word	0x00002391
    234c:	00002620 	.word	0x00002620
    2350:	000023fd 	.word	0x000023fd
    2354:	0000235d 	.word	0x0000235d
    2358:	00002624 	.word	0x00002624

0000235c <vExampleTimerCallback>:
}
/*-----------------------------------------------------------*/

static void vExampleTimerCallback( xTimerHandle xTimer )
{
    235c:	b480      	push	{r7}
    235e:	b083      	sub	sp, #12
    2360:	af00      	add	r7, sp, #0
    2362:	6078      	str	r0, [r7, #4]
	/* The timer has expired.  Count the number of times this happens.  The
	timer that calls this function is an auto re-load timer, so it will
	execute periodically. http://www.freertos.org/RTOS-software-timer.html */
	ulCountOfTimerCallbackExecutions++;
    2364:	4b09      	ldr	r3, [pc, #36]	; (238c <vExampleTimerCallback+0x30>)
    2366:	681b      	ldr	r3, [r3, #0]
    2368:	3301      	adds	r3, #1
    236a:	4a08      	ldr	r2, [pc, #32]	; (238c <vExampleTimerCallback+0x30>)
    236c:	6013      	str	r3, [r2, #0]

	if(ulCountOfTimerCallbackExecutions == 30)
    236e:	4b07      	ldr	r3, [pc, #28]	; (238c <vExampleTimerCallback+0x30>)
    2370:	681b      	ldr	r3, [r3, #0]
    2372:	2b1e      	cmp	r3, #30
    2374:	d104      	bne.n	2380 <vExampleTimerCallback+0x24>
	{
		ulCountOfTimerCallbackExecutions++;
    2376:	4b05      	ldr	r3, [pc, #20]	; (238c <vExampleTimerCallback+0x30>)
    2378:	681b      	ldr	r3, [r3, #0]
    237a:	3301      	adds	r3, #1
    237c:	4a03      	ldr	r2, [pc, #12]	; (238c <vExampleTimerCallback+0x30>)
    237e:	6013      	str	r3, [r2, #0]
	}
}
    2380:	bf00      	nop
    2382:	370c      	adds	r7, #12
    2384:	46bd      	mov	sp, r7
    2386:	bc80      	pop	{r7}
    2388:	4770      	bx	lr
    238a:	bf00      	nop
    238c:	1fff1d6c 	.word	0x1fff1d6c

00002390 <prvQueueSendTask>:
/*-----------------------------------------------------------*/

static void prvQueueSendTask( void *pvParameters )
{
    2390:	b580      	push	{r7, lr}
    2392:	b084      	sub	sp, #16
    2394:	af00      	add	r7, sp, #0
    2396:	6078      	str	r0, [r7, #4]
portTickType xNextWakeTime;
const uint32_t ulValueToSend = 100UL;
    2398:	2364      	movs	r3, #100	; 0x64
    239a:	60bb      	str	r3, [r7, #8]

	/* Initialise xNextWakeTime - this only needs to be done once. */
	xNextWakeTime = xTaskGetTickCount();
    239c:	f7fe ffde 	bl	135c <xTaskGetTickCount>
    23a0:	4603      	mov	r3, r0
    23a2:	60fb      	str	r3, [r7, #12]
	{
		/* Place this task in the blocked state until it is time to run again.
		The block time is specified in ticks, the constant used converts ticks
		to ms.  While in the Blocked state this task will not consume any CPU
		time.  http://www.freertos.org/vtaskdelayuntil.html */
		vTaskDelayUntil( &xNextWakeTime, mainQUEUE_SEND_PERIOD_MS );
    23a4:	f107 030c 	add.w	r3, r7, #12
    23a8:	21c8      	movs	r1, #200	; 0xc8
    23aa:	4618      	mov	r0, r3
    23ac:	f7fe feac 	bl	1108 <vTaskDelayUntil>

		/* Send to the queue - causing the queue receive task to unblock and
		increment its counter.  0 is used as the block time so the sending
		operation will not block - it shouldn't need to block as the queue
		should always be empty at this point in the code. */
		xQueueSend( xQueue, &ulValueToSend, 0 );
    23b0:	4b04      	ldr	r3, [pc, #16]	; (23c4 <prvQueueSendTask+0x34>)
    23b2:	6818      	ldr	r0, [r3, #0]
    23b4:	f107 0108 	add.w	r1, r7, #8
    23b8:	2300      	movs	r3, #0
    23ba:	2200      	movs	r2, #0
    23bc:	f7fe fac6 	bl	94c <xQueueGenericSend>
		vTaskDelayUntil( &xNextWakeTime, mainQUEUE_SEND_PERIOD_MS );
    23c0:	e7f0      	b.n	23a4 <prvQueueSendTask+0x14>
    23c2:	bf00      	nop
    23c4:	1fff1d64 	.word	0x1fff1d64

000023c8 <prvQueueReceiveTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvQueueReceiveTask( void *pvParameters )
{
    23c8:	b580      	push	{r7, lr}
    23ca:	b084      	sub	sp, #16
    23cc:	af00      	add	r7, sp, #0
    23ce:	6078      	str	r0, [r7, #4]
	for( ;; )
	{
		/* Wait until something arrives in the queue - this task will block
		indefinitely provided INCLUDE_vTaskSuspend is set to 1 in
		FreeRTOSConfig.h.  http://www.freertos.org/a00118.html */
		xQueueReceive( xQueue, &ulReceivedValue, portMAX_DELAY );
    23d0:	4b08      	ldr	r3, [pc, #32]	; (23f4 <prvQueueReceiveTask+0x2c>)
    23d2:	6818      	ldr	r0, [r3, #0]
    23d4:	f107 010c 	add.w	r1, r7, #12
    23d8:	2300      	movs	r3, #0
    23da:	f04f 32ff 	mov.w	r2, #4294967295
    23de:	f7fe fbad 	bl	b3c <xQueueGenericReceive>

		/*  To get here something must have been received from the queue, but
		is it the expected value?  If it is, increment the counter. */
		if( ulReceivedValue == 100UL )
    23e2:	68fb      	ldr	r3, [r7, #12]
    23e4:	2b64      	cmp	r3, #100	; 0x64
    23e6:	d1f3      	bne.n	23d0 <prvQueueReceiveTask+0x8>
		{
			/* Count the number of items that have been received correctly. */
			ulCountOfItemsReceivedOnQueue++;
    23e8:	4b03      	ldr	r3, [pc, #12]	; (23f8 <prvQueueReceiveTask+0x30>)
    23ea:	681b      	ldr	r3, [r3, #0]
    23ec:	3301      	adds	r3, #1
    23ee:	4a02      	ldr	r2, [pc, #8]	; (23f8 <prvQueueReceiveTask+0x30>)
    23f0:	6013      	str	r3, [r2, #0]
		xQueueReceive( xQueue, &ulReceivedValue, portMAX_DELAY );
    23f2:	e7ed      	b.n	23d0 <prvQueueReceiveTask+0x8>
    23f4:	1fff1d64 	.word	0x1fff1d64
    23f8:	1fff1d70 	.word	0x1fff1d70

000023fc <prvEventSemaphoreTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvEventSemaphoreTask( void *pvParameters )
{
    23fc:	b580      	push	{r7, lr}
    23fe:	b082      	sub	sp, #8
    2400:	af00      	add	r7, sp, #0
    2402:	6078      	str	r0, [r7, #4]
	for( ;; )
	{
		/* Block until the semaphore is 'given'. */
		xSemaphoreTake( xEventSemaphore, portMAX_DELAY );
    2404:	4b06      	ldr	r3, [pc, #24]	; (2420 <prvEventSemaphoreTask+0x24>)
    2406:	6818      	ldr	r0, [r3, #0]
    2408:	2300      	movs	r3, #0
    240a:	f04f 32ff 	mov.w	r2, #4294967295
    240e:	2100      	movs	r1, #0
    2410:	f7fe fb94 	bl	b3c <xQueueGenericReceive>

		/* Count the number of times the semaphore is received. */
		ulCountOfReceivedSemaphores++;
    2414:	4b03      	ldr	r3, [pc, #12]	; (2424 <prvEventSemaphoreTask+0x28>)
    2416:	681b      	ldr	r3, [r3, #0]
    2418:	3301      	adds	r3, #1
    241a:	4a02      	ldr	r2, [pc, #8]	; (2424 <prvEventSemaphoreTask+0x28>)
    241c:	6013      	str	r3, [r2, #0]
		xSemaphoreTake( xEventSemaphore, portMAX_DELAY );
    241e:	e7f1      	b.n	2404 <prvEventSemaphoreTask+0x8>
    2420:	1fff1d68 	.word	0x1fff1d68
    2424:	1fff1d74 	.word	0x1fff1d74

00002428 <vApplicationTickHook>:
	}
}
/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
    2428:	b580      	push	{r7, lr}
    242a:	b082      	sub	sp, #8
    242c:	af00      	add	r7, sp, #0
portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
    242e:	2300      	movs	r3, #0
    2430:	607b      	str	r3, [r7, #4]

	/* The RTOS tick hook function is enabled by setting configUSE_TICK_HOOK to
	1 in FreeRTOSConfig.h.

	"Give" the semaphore on every 500th tick interrupt. */
	ulCount++;
    2432:	4b0c      	ldr	r3, [pc, #48]	; (2464 <vApplicationTickHook+0x3c>)
    2434:	681b      	ldr	r3, [r3, #0]
    2436:	3301      	adds	r3, #1
    2438:	4a0a      	ldr	r2, [pc, #40]	; (2464 <vApplicationTickHook+0x3c>)
    243a:	6013      	str	r3, [r2, #0]
	if( ulCount >= 500UL )
    243c:	4b09      	ldr	r3, [pc, #36]	; (2464 <vApplicationTickHook+0x3c>)
    243e:	681b      	ldr	r3, [r3, #0]
    2440:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    2444:	d309      	bcc.n	245a <vApplicationTickHook+0x32>

		xHigherPriorityTaskWoken was initialised to pdFALSE, and will be set to
		pdTRUE by xSemaphoreGiveFromISR() if giving the semaphore unblocked a
		task that has equal or higher priority than the interrupted task.
		http://www.freertos.org/a00124.html */
		xSemaphoreGiveFromISR( xEventSemaphore, &xHigherPriorityTaskWoken );
    2446:	4b08      	ldr	r3, [pc, #32]	; (2468 <vApplicationTickHook+0x40>)
    2448:	6818      	ldr	r0, [r3, #0]
    244a:	1d3a      	adds	r2, r7, #4
    244c:	2300      	movs	r3, #0
    244e:	2100      	movs	r1, #0
    2450:	f7fe fb18 	bl	a84 <xQueueGenericSendFromISR>
		ulCount = 0UL;
    2454:	4b03      	ldr	r3, [pc, #12]	; (2464 <vApplicationTickHook+0x3c>)
    2456:	2200      	movs	r2, #0
    2458:	601a      	str	r2, [r3, #0]
	are using.  http://www.freertos.org/a00090.html

	In this case, the function is running in the context of the tick interrupt,
	which will automatically check for the higher priority task to run anyway,
	so no further action is required. */
}
    245a:	bf00      	nop
    245c:	3708      	adds	r7, #8
    245e:	46bd      	mov	sp, r7
    2460:	bd80      	pop	{r7, pc}
    2462:	bf00      	nop
    2464:	1fff1d78 	.word	0x1fff1d78
    2468:	1fff1d68 	.word	0x1fff1d68

0000246c <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
    246c:	b480      	push	{r7}
    246e:	af00      	add	r7, sp, #0
	Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software 
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
    2470:	e7fe      	b.n	2470 <vApplicationMallocFailedHook+0x4>

00002472 <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
    2472:	b480      	push	{r7}
    2474:	b083      	sub	sp, #12
    2476:	af00      	add	r7, sp, #0
    2478:	6078      	str	r0, [r7, #4]
    247a:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected.  pxCurrentTCB can be
	inspected in the debugger if the task name passed into this function is
	corrupt. */
	for( ;; );
    247c:	e7fe      	b.n	247c <vApplicationStackOverflowHook+0xa>

0000247e <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
    247e:	b580      	push	{r7, lr}
    2480:	b082      	sub	sp, #8
    2482:	af00      	add	r7, sp, #0
	FreeRTOSConfig.h.

	This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amount of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
    2484:	f7fe f9be 	bl	804 <xPortGetFreeHeapSize>
    2488:	4603      	mov	r3, r0
    248a:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
    248c:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
    248e:	bf00      	nop
    2490:	3708      	adds	r7, #8
    2492:	46bd      	mov	sp, r7
    2494:	bd80      	pop	{r7, pc}

00002496 <prvSetupHardware>:
/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
    2496:	b580      	push	{r7, lr}
    2498:	af00      	add	r7, sp, #0
	/* Ensure all priority bits are assigned as preemption priority bits.
	http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	NVIC_SetPriorityGrouping( 0 );
    249a:	2000      	movs	r0, #0
    249c:	f7ff feb2 	bl	2204 <NVIC_SetPriorityGrouping>

	/* TODO: Setup the clocks, etc. here, if they were not configured before
	main() was called. */
}
    24a0:	bf00      	nop
    24a2:	bd80      	pop	{r7, pc}

000024a4 <SystemInit>:

/* ----------------------------------------------------------------------------
   -- SystemInit()
   ---------------------------------------------------------------------------- */

void SystemInit (void) {
    24a4:	b480      	push	{r7}
    24a6:	af00      	add	r7, sp, #0
#if (DISABLE_WDOG)
  /* Disable the WDOG module */
  /* WDOG_UNLOCK: WDOGUNLOCK=0xC520 */
  WDOG->UNLOCK = (uint16_t)0xC520u;     /* Key 1 */
    24a8:	4b1f      	ldr	r3, [pc, #124]	; (2528 <SystemInit+0x84>)
    24aa:	f24c 5220 	movw	r2, #50464	; 0xc520
    24ae:	81da      	strh	r2, [r3, #14]
  /* WDOG_UNLOCK : WDOGUNLOCK=0xD928 */
  WDOG->UNLOCK  = (uint16_t)0xD928u;    /* Key 2 */
    24b0:	4b1d      	ldr	r3, [pc, #116]	; (2528 <SystemInit+0x84>)
    24b2:	f64d 1228 	movw	r2, #55592	; 0xd928
    24b6:	81da      	strh	r2, [r3, #14]
  /* WDOG_STCTRLH: ??=0,DISTESTWDOG=0,BYTESEL=0,TESTSEL=0,TESTWDOG=0,??=0,STNDBYEN=1,WAITEN=1,STOPEN=1,DBGEN=0,ALLOWUPDATE=1,WINEN=0,IRQRSTEN=0,CLKSRC=1,WDOGEN=0 */
  WDOG->STCTRLH = (uint16_t)0x01D2u;
    24b8:	4b1b      	ldr	r3, [pc, #108]	; (2528 <SystemInit+0x84>)
    24ba:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
    24be:	801a      	strh	r2, [r3, #0]
#endif /* (DISABLE_WDOG) */

  /* System clock initialization */
#if (CLOCK_SETUP == 0)
  /* SIM->CLKDIV1: OUTDIV1=0,OUTDIV2=0,OUTDIV3=1,OUTDIV4=1,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
  SIM->CLKDIV1 = (uint32_t)0x00110000u; /* Update system prescalers */
    24c0:	4b1a      	ldr	r3, [pc, #104]	; (252c <SystemInit+0x88>)
    24c2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
    24c6:	3304      	adds	r3, #4
    24c8:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
    24cc:	601a      	str	r2, [r3, #0]
  /* Switch to FEI Mode */
  /* MCG->C1: CLKS=0,FRDIV=0,IREFS=1,IRCLKEN=1,IREFSTEN=0 */
  MCG->C1 = (uint8_t)0x06u;
    24ce:	4b18      	ldr	r3, [pc, #96]	; (2530 <SystemInit+0x8c>)
    24d0:	2206      	movs	r2, #6
    24d2:	701a      	strb	r2, [r3, #0]
  /* MCG->C2: ??=0,??=0,RANGE=0,HGO=0,EREFS=0,LP=0,IRCS=0 */
  MCG->C2 = (uint8_t)0x00u;
    24d4:	4b16      	ldr	r3, [pc, #88]	; (2530 <SystemInit+0x8c>)
    24d6:	2200      	movs	r2, #0
    24d8:	705a      	strb	r2, [r3, #1]
  /* MCG_C4: DMX32=0,DRST_DRS=1 */
  MCG->C4 = (uint8_t)((MCG->C4 & (uint8_t)~(uint8_t)0xC0u) | (uint8_t)0x20u);
    24da:	4a15      	ldr	r2, [pc, #84]	; (2530 <SystemInit+0x8c>)
    24dc:	4b14      	ldr	r3, [pc, #80]	; (2530 <SystemInit+0x8c>)
    24de:	78db      	ldrb	r3, [r3, #3]
    24e0:	b2db      	uxtb	r3, r3
    24e2:	b25b      	sxtb	r3, r3
    24e4:	f003 031f 	and.w	r3, r3, #31
    24e8:	b25b      	sxtb	r3, r3
    24ea:	f043 0320 	orr.w	r3, r3, #32
    24ee:	b25b      	sxtb	r3, r3
    24f0:	b2db      	uxtb	r3, r3
    24f2:	70d3      	strb	r3, [r2, #3]
  /* MCG->C5: ??=0,PLLCLKEN=0,PLLSTEN=0,PRDIV=0 */
  MCG->C5 = (uint8_t)0x00u;
    24f4:	4b0e      	ldr	r3, [pc, #56]	; (2530 <SystemInit+0x8c>)
    24f6:	2200      	movs	r2, #0
    24f8:	711a      	strb	r2, [r3, #4]
  /* MCG->C6: LOLIE=0,PLLS=0,CME=0,VDIV=0 */
  MCG->C6 = (uint8_t)0x00u;
    24fa:	4b0d      	ldr	r3, [pc, #52]	; (2530 <SystemInit+0x8c>)
    24fc:	2200      	movs	r2, #0
    24fe:	715a      	strb	r2, [r3, #5]
  while((MCG->S & MCG_S_IREFST_MASK) == 0u) { /* Check that the source of the FLL reference clock is the internal reference clock. */
    2500:	bf00      	nop
    2502:	4b0b      	ldr	r3, [pc, #44]	; (2530 <SystemInit+0x8c>)
    2504:	799b      	ldrb	r3, [r3, #6]
    2506:	b2db      	uxtb	r3, r3
    2508:	f003 0310 	and.w	r3, r3, #16
    250c:	2b00      	cmp	r3, #0
    250e:	d0f8      	beq.n	2502 <SystemInit+0x5e>
  }
  while((MCG->S & 0x0Cu) != 0x00u) {    /* Wait until output of the FLL is selected */
    2510:	bf00      	nop
    2512:	4b07      	ldr	r3, [pc, #28]	; (2530 <SystemInit+0x8c>)
    2514:	799b      	ldrb	r3, [r3, #6]
    2516:	b2db      	uxtb	r3, r3
    2518:	f003 030c 	and.w	r3, r3, #12
    251c:	2b00      	cmp	r3, #0
    251e:	d1f8      	bne.n	2512 <SystemInit+0x6e>
  }
  /* Switch to BLPE Mode */
  /* MCG->C2: ??=0,??=0,RANGE=2,HGO=0,EREFS=0,LP=0,IRCS=0 */
  MCG->C2 = (uint8_t)0x22u;
#endif /* (CLOCK_SETUP == 4) */
}
    2520:	bf00      	nop
    2522:	46bd      	mov	sp, r7
    2524:	bc80      	pop	{r7}
    2526:	4770      	bx	lr
    2528:	40052000 	.word	0x40052000
    252c:	40047000 	.word	0x40047000
    2530:	40064000 	.word	0x40064000

00002534 <__libc_init_array>:
    2534:	b570      	push	{r4, r5, r6, lr}
    2536:	4e0d      	ldr	r6, [pc, #52]	; (256c <__libc_init_array+0x38>)
    2538:	4c0d      	ldr	r4, [pc, #52]	; (2570 <__libc_init_array+0x3c>)
    253a:	1ba4      	subs	r4, r4, r6
    253c:	10a4      	asrs	r4, r4, #2
    253e:	2500      	movs	r5, #0
    2540:	42a5      	cmp	r5, r4
    2542:	d109      	bne.n	2558 <__libc_init_array+0x24>
    2544:	4e0b      	ldr	r6, [pc, #44]	; (2574 <__libc_init_array+0x40>)
    2546:	4c0c      	ldr	r4, [pc, #48]	; (2578 <__libc_init_array+0x44>)
    2548:	f000 f87c 	bl	2644 <_init>
    254c:	1ba4      	subs	r4, r4, r6
    254e:	10a4      	asrs	r4, r4, #2
    2550:	2500      	movs	r5, #0
    2552:	42a5      	cmp	r5, r4
    2554:	d105      	bne.n	2562 <__libc_init_array+0x2e>
    2556:	bd70      	pop	{r4, r5, r6, pc}
    2558:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    255c:	4798      	blx	r3
    255e:	3501      	adds	r5, #1
    2560:	e7ee      	b.n	2540 <__libc_init_array+0xc>
    2562:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2566:	4798      	blx	r3
    2568:	3501      	adds	r5, #1
    256a:	e7f2      	b.n	2552 <__libc_init_array+0x1e>
    256c:	0000265c 	.word	0x0000265c
    2570:	0000265c 	.word	0x0000265c
    2574:	0000265c 	.word	0x0000265c
    2578:	00002660 	.word	0x00002660

0000257c <memcmp>:
    257c:	b510      	push	{r4, lr}
    257e:	3901      	subs	r1, #1
    2580:	4402      	add	r2, r0
    2582:	4290      	cmp	r0, r2
    2584:	d101      	bne.n	258a <memcmp+0xe>
    2586:	2000      	movs	r0, #0
    2588:	bd10      	pop	{r4, pc}
    258a:	f810 3b01 	ldrb.w	r3, [r0], #1
    258e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    2592:	42a3      	cmp	r3, r4
    2594:	d0f5      	beq.n	2582 <memcmp+0x6>
    2596:	1b18      	subs	r0, r3, r4
    2598:	bd10      	pop	{r4, pc}

0000259a <memcpy>:
    259a:	b510      	push	{r4, lr}
    259c:	1e43      	subs	r3, r0, #1
    259e:	440a      	add	r2, r1
    25a0:	4291      	cmp	r1, r2
    25a2:	d100      	bne.n	25a6 <memcpy+0xc>
    25a4:	bd10      	pop	{r4, pc}
    25a6:	f811 4b01 	ldrb.w	r4, [r1], #1
    25aa:	f803 4f01 	strb.w	r4, [r3, #1]!
    25ae:	e7f7      	b.n	25a0 <memcpy+0x6>

000025b0 <memset>:
    25b0:	4402      	add	r2, r0
    25b2:	4603      	mov	r3, r0
    25b4:	4293      	cmp	r3, r2
    25b6:	d100      	bne.n	25ba <memset+0xa>
    25b8:	4770      	bx	lr
    25ba:	f803 1b01 	strb.w	r1, [r3], #1
    25be:	e7f9      	b.n	25b4 <memset+0x4>

000025c0 <strncpy>:
    25c0:	b570      	push	{r4, r5, r6, lr}
    25c2:	4604      	mov	r4, r0
    25c4:	b902      	cbnz	r2, 25c8 <strncpy+0x8>
    25c6:	bd70      	pop	{r4, r5, r6, pc}
    25c8:	4623      	mov	r3, r4
    25ca:	f811 5b01 	ldrb.w	r5, [r1], #1
    25ce:	f803 5b01 	strb.w	r5, [r3], #1
    25d2:	1e56      	subs	r6, r2, #1
    25d4:	b91d      	cbnz	r5, 25de <strncpy+0x1e>
    25d6:	4414      	add	r4, r2
    25d8:	42a3      	cmp	r3, r4
    25da:	d103      	bne.n	25e4 <strncpy+0x24>
    25dc:	bd70      	pop	{r4, r5, r6, pc}
    25de:	461c      	mov	r4, r3
    25e0:	4632      	mov	r2, r6
    25e2:	e7ef      	b.n	25c4 <strncpy+0x4>
    25e4:	f803 5b01 	strb.w	r5, [r3], #1
    25e8:	e7f6      	b.n	25d8 <strncpy+0x18>
    25ea:	0000      	movs	r0, r0
    25ec:	454c4449 	.word	0x454c4449
    25f0:	00000000 	.word	0x00000000
    25f4:	20726d54 	.word	0x20726d54
    25f8:	00637653 	.word	0x00637653
    25fc:	6e69614d 	.word	0x6e69614d
    2600:	75657551 	.word	0x75657551
    2604:	00000065 	.word	0x00000065
    2608:	65764578 	.word	0x65764578
    260c:	6553746e 	.word	0x6553746e
    2610:	6870616d 	.word	0x6870616d
    2614:	0065726f 	.word	0x0065726f
    2618:	00007852 	.word	0x00007852
    261c:	00005854 	.word	0x00005854
    2620:	006d6553 	.word	0x006d6553
    2624:	5444454c 	.word	0x5444454c
    2628:	72656d69 	.word	0x72656d69
    262c:	00000000 	.word	0x00000000

00002630 <ucExpectedStackBytes.6072>:
    2630:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
    2640:	a5a5a5a5                                ....

00002644 <_init>:
    2644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2646:	bf00      	nop
    2648:	bcf8      	pop	{r3, r4, r5, r6, r7}
    264a:	bc08      	pop	{r3}
    264c:	469e      	mov	lr, r3
    264e:	4770      	bx	lr

00002650 <_fini>:
    2650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2652:	bf00      	nop
    2654:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2656:	bc08      	pop	{r3}
    2658:	469e      	mov	lr, r3
    265a:	4770      	bx	lr
